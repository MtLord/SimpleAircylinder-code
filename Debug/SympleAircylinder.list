
SympleAircylinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  9 .bss          000000e4  20000070  20000070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000154  20000154  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010780  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000245f  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003222  00000000  00000000  00032c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000650  00000000  00000000  00035ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000800  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000417b  00000000  00000000  00036cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002b03  00000000  00000000  0003ae73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0003d976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010a4  00000000  00000000  0003d9f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026f4 	.word	0x080026f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080026f4 	.word	0x080026f4

080001c8 <selfrel_offset31>:
 80001c8:	6803      	ldr	r3, [r0, #0]
 80001ca:	005a      	lsls	r2, r3, #1
 80001cc:	bf4c      	ite	mi
 80001ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001d2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001d6:	4418      	add	r0, r3
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <search_EIT_table>:
 80001dc:	b361      	cbz	r1, 8000238 <search_EIT_table+0x5c>
 80001de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001e2:	f101 3aff 	add.w	sl, r1, #4294967295
 80001e6:	4690      	mov	r8, r2
 80001e8:	4606      	mov	r6, r0
 80001ea:	46d1      	mov	r9, sl
 80001ec:	2700      	movs	r7, #0
 80001ee:	eb07 0409 	add.w	r4, r7, r9
 80001f2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80001f6:	1064      	asrs	r4, r4, #1
 80001f8:	00e5      	lsls	r5, r4, #3
 80001fa:	1971      	adds	r1, r6, r5
 80001fc:	4608      	mov	r0, r1
 80001fe:	f7ff ffe3 	bl	80001c8 <selfrel_offset31>
 8000202:	45a2      	cmp	sl, r4
 8000204:	4683      	mov	fp, r0
 8000206:	f105 0008 	add.w	r0, r5, #8
 800020a:	4430      	add	r0, r6
 800020c:	d009      	beq.n	8000222 <search_EIT_table+0x46>
 800020e:	f7ff ffdb 	bl	80001c8 <selfrel_offset31>
 8000212:	45c3      	cmp	fp, r8
 8000214:	f100 30ff 	add.w	r0, r0, #4294967295
 8000218:	d805      	bhi.n	8000226 <search_EIT_table+0x4a>
 800021a:	4540      	cmp	r0, r8
 800021c:	d209      	bcs.n	8000232 <search_EIT_table+0x56>
 800021e:	1c67      	adds	r7, r4, #1
 8000220:	e7e5      	b.n	80001ee <search_EIT_table+0x12>
 8000222:	45c3      	cmp	fp, r8
 8000224:	d905      	bls.n	8000232 <search_EIT_table+0x56>
 8000226:	42a7      	cmp	r7, r4
 8000228:	d002      	beq.n	8000230 <search_EIT_table+0x54>
 800022a:	f104 39ff 	add.w	r9, r4, #4294967295
 800022e:	e7de      	b.n	80001ee <search_EIT_table+0x12>
 8000230:	2100      	movs	r1, #0
 8000232:	4608      	mov	r0, r1
 8000234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000238:	4608      	mov	r0, r1
 800023a:	4770      	bx	lr

0800023c <__gnu_unwind_get_pr_addr>:
 800023c:	2801      	cmp	r0, #1
 800023e:	d007      	beq.n	8000250 <__gnu_unwind_get_pr_addr+0x14>
 8000240:	2802      	cmp	r0, #2
 8000242:	d007      	beq.n	8000254 <__gnu_unwind_get_pr_addr+0x18>
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <__gnu_unwind_get_pr_addr+0x1c>)
 8000246:	2800      	cmp	r0, #0
 8000248:	bf0c      	ite	eq
 800024a:	4618      	moveq	r0, r3
 800024c:	2000      	movne	r0, #0
 800024e:	4770      	bx	lr
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <__gnu_unwind_get_pr_addr+0x20>)
 8000252:	4770      	bx	lr
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <__gnu_unwind_get_pr_addr+0x24>)
 8000256:	4770      	bx	lr
 8000258:	08000941 	.word	0x08000941
 800025c:	08000945 	.word	0x08000945
 8000260:	08000949 	.word	0x08000949

08000264 <get_eit_entry>:
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <get_eit_entry+0x94>)
 8000268:	b083      	sub	sp, #12
 800026a:	4604      	mov	r4, r0
 800026c:	1e8d      	subs	r5, r1, #2
 800026e:	b37b      	cbz	r3, 80002d0 <get_eit_entry+0x6c>
 8000270:	a901      	add	r1, sp, #4
 8000272:	4628      	mov	r0, r5
 8000274:	f3af 8000 	nop.w
 8000278:	b320      	cbz	r0, 80002c4 <get_eit_entry+0x60>
 800027a:	9901      	ldr	r1, [sp, #4]
 800027c:	462a      	mov	r2, r5
 800027e:	f7ff ffad 	bl	80001dc <search_EIT_table>
 8000282:	4601      	mov	r1, r0
 8000284:	b1f0      	cbz	r0, 80002c4 <get_eit_entry+0x60>
 8000286:	f7ff ff9f 	bl	80001c8 <selfrel_offset31>
 800028a:	684b      	ldr	r3, [r1, #4]
 800028c:	64a0      	str	r0, [r4, #72]	; 0x48
 800028e:	2b01      	cmp	r3, #1
 8000290:	d012      	beq.n	80002b8 <get_eit_entry+0x54>
 8000292:	2b00      	cmp	r3, #0
 8000294:	f101 0004 	add.w	r0, r1, #4
 8000298:	db20      	blt.n	80002dc <get_eit_entry+0x78>
 800029a:	f7ff ff95 	bl	80001c8 <selfrel_offset31>
 800029e:	2300      	movs	r3, #0
 80002a0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002a2:	6523      	str	r3, [r4, #80]	; 0x50
 80002a4:	6803      	ldr	r3, [r0, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db1c      	blt.n	80002e4 <get_eit_entry+0x80>
 80002aa:	f7ff ff8d 	bl	80001c8 <selfrel_offset31>
 80002ae:	2300      	movs	r3, #0
 80002b0:	6120      	str	r0, [r4, #16]
 80002b2:	4618      	mov	r0, r3
 80002b4:	b003      	add	sp, #12
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	2300      	movs	r3, #0
 80002ba:	6123      	str	r3, [r4, #16]
 80002bc:	2305      	movs	r3, #5
 80002be:	4618      	mov	r0, r3
 80002c0:	b003      	add	sp, #12
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	2300      	movs	r3, #0
 80002c6:	6123      	str	r3, [r4, #16]
 80002c8:	2309      	movs	r3, #9
 80002ca:	4618      	mov	r0, r3
 80002cc:	b003      	add	sp, #12
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	490a      	ldr	r1, [pc, #40]	; (80002fc <get_eit_entry+0x98>)
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <get_eit_entry+0x9c>)
 80002d4:	1a09      	subs	r1, r1, r0
 80002d6:	10c9      	asrs	r1, r1, #3
 80002d8:	9101      	str	r1, [sp, #4]
 80002da:	e7cf      	b.n	800027c <get_eit_entry+0x18>
 80002dc:	2301      	movs	r3, #1
 80002de:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002e0:	6523      	str	r3, [r4, #80]	; 0x50
 80002e2:	e7df      	b.n	80002a4 <get_eit_entry+0x40>
 80002e4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002e8:	f7ff ffa8 	bl	800023c <__gnu_unwind_get_pr_addr>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	6120      	str	r0, [r4, #16]
 80002f0:	bf14      	ite	ne
 80002f2:	2300      	movne	r3, #0
 80002f4:	2309      	moveq	r3, #9
 80002f6:	e7dc      	b.n	80002b2 <get_eit_entry+0x4e>
 80002f8:	00000000 	.word	0x00000000
 80002fc:	080028b8 	.word	0x080028b8
 8000300:	080027d8 	.word	0x080027d8

08000304 <restore_non_core_regs>:
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	07da      	lsls	r2, r3, #31
 8000308:	b510      	push	{r4, lr}
 800030a:	4604      	mov	r4, r0
 800030c:	d406      	bmi.n	800031c <restore_non_core_regs+0x18>
 800030e:	079b      	lsls	r3, r3, #30
 8000310:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000314:	d509      	bpl.n	800032a <restore_non_core_regs+0x26>
 8000316:	f000 fc51 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D>
 800031a:	6823      	ldr	r3, [r4, #0]
 800031c:	0759      	lsls	r1, r3, #29
 800031e:	d509      	bpl.n	8000334 <restore_non_core_regs+0x30>
 8000320:	071a      	lsls	r2, r3, #28
 8000322:	d50e      	bpl.n	8000342 <restore_non_core_regs+0x3e>
 8000324:	06db      	lsls	r3, r3, #27
 8000326:	d513      	bpl.n	8000350 <restore_non_core_regs+0x4c>
 8000328:	bd10      	pop	{r4, pc}
 800032a:	f000 fc3f 	bl	8000bac <__gnu_Unwind_Restore_VFP>
 800032e:	6823      	ldr	r3, [r4, #0]
 8000330:	0759      	lsls	r1, r3, #29
 8000332:	d4f5      	bmi.n	8000320 <restore_non_core_regs+0x1c>
 8000334:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000338:	f000 fc48 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800033c:	6823      	ldr	r3, [r4, #0]
 800033e:	071a      	lsls	r2, r3, #28
 8000340:	d4f0      	bmi.n	8000324 <restore_non_core_regs+0x20>
 8000342:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000346:	f000 fc49 	bl	8000bdc <__gnu_Unwind_Restore_WMMXD>
 800034a:	6823      	ldr	r3, [r4, #0]
 800034c:	06db      	lsls	r3, r3, #27
 800034e:	d4eb      	bmi.n	8000328 <restore_non_core_regs+0x24>
 8000350:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000358:	f000 bc84 	b.w	8000c64 <__gnu_Unwind_Restore_WMMXC>

0800035c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800035c:	6803      	ldr	r3, [r0, #0]
 800035e:	b103      	cbz	r3, 8000362 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000360:	4403      	add	r3, r0
 8000362:	4618      	mov	r0, r3
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <__gnu_unwind_24bit.isra.1>:
 8000368:	2009      	movs	r0, #9
 800036a:	4770      	bx	lr

0800036c <_Unwind_DebugHook>:
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <unwind_phase2>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4604      	mov	r4, r0
 8000374:	460d      	mov	r5, r1
 8000376:	e008      	b.n	800038a <unwind_phase2+0x1a>
 8000378:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800037a:	6163      	str	r3, [r4, #20]
 800037c:	462a      	mov	r2, r5
 800037e:	6923      	ldr	r3, [r4, #16]
 8000380:	4621      	mov	r1, r4
 8000382:	2001      	movs	r0, #1
 8000384:	4798      	blx	r3
 8000386:	2808      	cmp	r0, #8
 8000388:	d108      	bne.n	800039c <unwind_phase2+0x2c>
 800038a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800038c:	4620      	mov	r0, r4
 800038e:	f7ff ff69 	bl	8000264 <get_eit_entry>
 8000392:	4606      	mov	r6, r0
 8000394:	2800      	cmp	r0, #0
 8000396:	d0ef      	beq.n	8000378 <unwind_phase2+0x8>
 8000398:	f002 f961 	bl	800265e <abort>
 800039c:	2807      	cmp	r0, #7
 800039e:	d1fb      	bne.n	8000398 <unwind_phase2+0x28>
 80003a0:	4630      	mov	r0, r6
 80003a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003a4:	f7ff ffe2 	bl	800036c <_Unwind_DebugHook>
 80003a8:	1d28      	adds	r0, r5, #4
 80003aa:	f000 fbf3 	bl	8000b94 <__restore_core_regs>
 80003ae:	bf00      	nop

080003b0 <unwind_phase2_forced>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	1d0c      	adds	r4, r1, #4
 80003b6:	4605      	mov	r5, r0
 80003b8:	4692      	mov	sl, r2
 80003ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003bc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003c0:	ae03      	add	r6, sp, #12
 80003c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003d0:	ac02      	add	r4, sp, #8
 80003d2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80003d6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80003da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80003de:	2300      	movs	r3, #0
 80003e0:	4628      	mov	r0, r5
 80003e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003e4:	6023      	str	r3, [r4, #0]
 80003e6:	f7ff ff3d 	bl	8000264 <get_eit_entry>
 80003ea:	f1ba 0f00 	cmp.w	sl, #0
 80003ee:	4607      	mov	r7, r0
 80003f0:	bf14      	ite	ne
 80003f2:	260a      	movne	r6, #10
 80003f4:	2609      	moveq	r6, #9
 80003f6:	b17f      	cbz	r7, 8000418 <unwind_phase2_forced+0x68>
 80003f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80003fa:	f046 0110 	orr.w	r1, r6, #16
 80003fe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000402:	462a      	mov	r2, r5
 8000404:	6463      	str	r3, [r4, #68]	; 0x44
 8000406:	2001      	movs	r0, #1
 8000408:	462b      	mov	r3, r5
 800040a:	47c0      	blx	r8
 800040c:	bb78      	cbnz	r0, 800046e <unwind_phase2_forced+0xbe>
 800040e:	4638      	mov	r0, r7
 8000410:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800041a:	616b      	str	r3, [r5, #20]
 800041c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000420:	4621      	mov	r1, r4
 8000422:	a87a      	add	r0, sp, #488	; 0x1e8
 8000424:	f002 f910 	bl	8002648 <memcpy>
 8000428:	692b      	ldr	r3, [r5, #16]
 800042a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800042c:	4629      	mov	r1, r5
 800042e:	4630      	mov	r0, r6
 8000430:	4798      	blx	r3
 8000432:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000434:	4682      	mov	sl, r0
 8000436:	e88d 0210 	stmia.w	sp, {r4, r9}
 800043a:	4631      	mov	r1, r6
 800043c:	6463      	str	r3, [r4, #68]	; 0x44
 800043e:	462a      	mov	r2, r5
 8000440:	462b      	mov	r3, r5
 8000442:	2001      	movs	r0, #1
 8000444:	47c0      	blx	r8
 8000446:	b990      	cbnz	r0, 800046e <unwind_phase2_forced+0xbe>
 8000448:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800044c:	a97a      	add	r1, sp, #488	; 0x1e8
 800044e:	4620      	mov	r0, r4
 8000450:	f002 f8fa 	bl	8002648 <memcpy>
 8000454:	f1ba 0f08 	cmp.w	sl, #8
 8000458:	d106      	bne.n	8000468 <unwind_phase2_forced+0xb8>
 800045a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800045c:	4628      	mov	r0, r5
 800045e:	f7ff ff01 	bl	8000264 <get_eit_entry>
 8000462:	2609      	movs	r6, #9
 8000464:	4607      	mov	r7, r0
 8000466:	e7c6      	b.n	80003f6 <unwind_phase2_forced+0x46>
 8000468:	f1ba 0f07 	cmp.w	sl, #7
 800046c:	d005      	beq.n	800047a <unwind_phase2_forced+0xca>
 800046e:	2709      	movs	r7, #9
 8000470:	4638      	mov	r0, r7
 8000472:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	4638      	mov	r0, r7
 800047c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800047e:	f7ff ff75 	bl	800036c <_Unwind_DebugHook>
 8000482:	a803      	add	r0, sp, #12
 8000484:	f000 fb86 	bl	8000b94 <__restore_core_regs>

08000488 <_Unwind_GetCFA>:
 8000488:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800048a:	4770      	bx	lr

0800048c <__gnu_Unwind_RaiseException>:
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000490:	640b      	str	r3, [r1, #64]	; 0x40
 8000492:	1d0e      	adds	r6, r1, #4
 8000494:	460f      	mov	r7, r1
 8000496:	4604      	mov	r4, r0
 8000498:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800049a:	b0f9      	sub	sp, #484	; 0x1e4
 800049c:	ad01      	add	r5, sp, #4
 800049e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004ac:	f04f 36ff 	mov.w	r6, #4294967295
 80004b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004b4:	9600      	str	r6, [sp, #0]
 80004b6:	e006      	b.n	80004c6 <__gnu_Unwind_RaiseException+0x3a>
 80004b8:	6923      	ldr	r3, [r4, #16]
 80004ba:	466a      	mov	r2, sp
 80004bc:	4621      	mov	r1, r4
 80004be:	4798      	blx	r3
 80004c0:	2808      	cmp	r0, #8
 80004c2:	4605      	mov	r5, r0
 80004c4:	d108      	bne.n	80004d8 <__gnu_Unwind_RaiseException+0x4c>
 80004c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff fecb 	bl	8000264 <get_eit_entry>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d0f2      	beq.n	80004b8 <__gnu_Unwind_RaiseException+0x2c>
 80004d2:	2009      	movs	r0, #9
 80004d4:	b079      	add	sp, #484	; 0x1e4
 80004d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d8:	4668      	mov	r0, sp
 80004da:	f7ff ff13 	bl	8000304 <restore_non_core_regs>
 80004de:	2d06      	cmp	r5, #6
 80004e0:	d1f7      	bne.n	80004d2 <__gnu_Unwind_RaiseException+0x46>
 80004e2:	4639      	mov	r1, r7
 80004e4:	4620      	mov	r0, r4
 80004e6:	f7ff ff43 	bl	8000370 <unwind_phase2>
 80004ea:	bf00      	nop

080004ec <__gnu_Unwind_ForcedUnwind>:
 80004ec:	b430      	push	{r4, r5}
 80004ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004f0:	60c1      	str	r1, [r0, #12]
 80004f2:	6182      	str	r2, [r0, #24]
 80004f4:	4619      	mov	r1, r3
 80004f6:	641d      	str	r5, [r3, #64]	; 0x40
 80004f8:	2200      	movs	r2, #0
 80004fa:	bc30      	pop	{r4, r5}
 80004fc:	e758      	b.n	80003b0 <unwind_phase2_forced>
 80004fe:	bf00      	nop

08000500 <__gnu_Unwind_Resume>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	68c6      	ldr	r6, [r0, #12]
 8000504:	6943      	ldr	r3, [r0, #20]
 8000506:	640b      	str	r3, [r1, #64]	; 0x40
 8000508:	b126      	cbz	r6, 8000514 <__gnu_Unwind_Resume+0x14>
 800050a:	2201      	movs	r2, #1
 800050c:	f7ff ff50 	bl	80003b0 <unwind_phase2_forced>
 8000510:	f002 f8a5 	bl	800265e <abort>
 8000514:	6903      	ldr	r3, [r0, #16]
 8000516:	460a      	mov	r2, r1
 8000518:	4604      	mov	r4, r0
 800051a:	460d      	mov	r5, r1
 800051c:	4601      	mov	r1, r0
 800051e:	2002      	movs	r0, #2
 8000520:	4798      	blx	r3
 8000522:	2807      	cmp	r0, #7
 8000524:	d007      	beq.n	8000536 <__gnu_Unwind_Resume+0x36>
 8000526:	2808      	cmp	r0, #8
 8000528:	d103      	bne.n	8000532 <__gnu_Unwind_Resume+0x32>
 800052a:	4629      	mov	r1, r5
 800052c:	4620      	mov	r0, r4
 800052e:	f7ff ff1f 	bl	8000370 <unwind_phase2>
 8000532:	f002 f894 	bl	800265e <abort>
 8000536:	4630      	mov	r0, r6
 8000538:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800053a:	f7ff ff17 	bl	800036c <_Unwind_DebugHook>
 800053e:	1d28      	adds	r0, r5, #4
 8000540:	f000 fb28 	bl	8000b94 <__restore_core_regs>

08000544 <__gnu_Unwind_Resume_or_Rethrow>:
 8000544:	68c2      	ldr	r2, [r0, #12]
 8000546:	b11a      	cbz	r2, 8000550 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000548:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800054a:	640a      	str	r2, [r1, #64]	; 0x40
 800054c:	2200      	movs	r2, #0
 800054e:	e72f      	b.n	80003b0 <unwind_phase2_forced>
 8000550:	e79c      	b.n	800048c <__gnu_Unwind_RaiseException>
 8000552:	bf00      	nop

08000554 <_Unwind_Complete>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <_Unwind_DeleteException>:
 8000558:	6883      	ldr	r3, [r0, #8]
 800055a:	b113      	cbz	r3, 8000562 <_Unwind_DeleteException+0xa>
 800055c:	4601      	mov	r1, r0
 800055e:	2001      	movs	r0, #1
 8000560:	4718      	bx	r3
 8000562:	4770      	bx	lr

08000564 <_Unwind_VRS_Get>:
 8000564:	b500      	push	{lr}
 8000566:	2904      	cmp	r1, #4
 8000568:	d807      	bhi.n	800057a <_Unwind_VRS_Get+0x16>
 800056a:	e8df f001 	tbb	[pc, r1]
 800056e:	0903      	.short	0x0903
 8000570:	0906      	.short	0x0906
 8000572:	09          	.byte	0x09
 8000573:	00          	.byte	0x00
 8000574:	b90b      	cbnz	r3, 800057a <_Unwind_VRS_Get+0x16>
 8000576:	2a0f      	cmp	r2, #15
 8000578:	d905      	bls.n	8000586 <_Unwind_VRS_Get+0x22>
 800057a:	2002      	movs	r0, #2
 800057c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000580:	2001      	movs	r0, #1
 8000582:	f85d fb04 	ldr.w	pc, [sp], #4
 8000586:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800058a:	4618      	mov	r0, r3
 800058c:	6853      	ldr	r3, [r2, #4]
 800058e:	9a01      	ldr	r2, [sp, #4]
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	f85d fb04 	ldr.w	pc, [sp], #4
 8000596:	bf00      	nop

08000598 <_Unwind_GetGR>:
 8000598:	b510      	push	{r4, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	2300      	movs	r3, #0
 800059e:	ac03      	add	r4, sp, #12
 80005a0:	460a      	mov	r2, r1
 80005a2:	9400      	str	r4, [sp, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f7ff ffdd 	bl	8000564 <_Unwind_VRS_Get>
 80005aa:	9803      	ldr	r0, [sp, #12]
 80005ac:	b004      	add	sp, #16
 80005ae:	bd10      	pop	{r4, pc}

080005b0 <_Unwind_VRS_Set>:
 80005b0:	b500      	push	{lr}
 80005b2:	2904      	cmp	r1, #4
 80005b4:	d807      	bhi.n	80005c6 <_Unwind_VRS_Set+0x16>
 80005b6:	e8df f001 	tbb	[pc, r1]
 80005ba:	0903      	.short	0x0903
 80005bc:	0906      	.short	0x0906
 80005be:	09          	.byte	0x09
 80005bf:	00          	.byte	0x00
 80005c0:	b90b      	cbnz	r3, 80005c6 <_Unwind_VRS_Set+0x16>
 80005c2:	2a0f      	cmp	r2, #15
 80005c4:	d905      	bls.n	80005d2 <_Unwind_VRS_Set+0x22>
 80005c6:	2002      	movs	r0, #2
 80005c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80005cc:	2001      	movs	r0, #1
 80005ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005d8:	6809      	ldr	r1, [r1, #0]
 80005da:	6051      	str	r1, [r2, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e2:	bf00      	nop

080005e4 <_Unwind_SetGR>:
 80005e4:	b510      	push	{r4, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	ac04      	add	r4, sp, #16
 80005ea:	2300      	movs	r3, #0
 80005ec:	f844 2d04 	str.w	r2, [r4, #-4]!
 80005f0:	460a      	mov	r2, r1
 80005f2:	9400      	str	r4, [sp, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f7ff ffdb 	bl	80005b0 <_Unwind_VRS_Set>
 80005fa:	b004      	add	sp, #16
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop

08000600 <__gnu_Unwind_Backtrace>:
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	1d15      	adds	r5, r2, #4
 8000608:	4607      	mov	r7, r0
 800060a:	460e      	mov	r6, r1
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000612:	ac17      	add	r4, sp, #92	; 0x5c
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000622:	f04f 35ff 	mov.w	r5, #4294967295
 8000626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800062a:	9516      	str	r5, [sp, #88]	; 0x58
 800062c:	e010      	b.n	8000650 <__gnu_Unwind_Backtrace+0x50>
 800062e:	a816      	add	r0, sp, #88	; 0x58
 8000630:	f7ff ffd8 	bl	80005e4 <_Unwind_SetGR>
 8000634:	4631      	mov	r1, r6
 8000636:	a816      	add	r0, sp, #88	; 0x58
 8000638:	47b8      	blx	r7
 800063a:	aa16      	add	r2, sp, #88	; 0x58
 800063c:	4669      	mov	r1, sp
 800063e:	b978      	cbnz	r0, 8000660 <__gnu_Unwind_Backtrace+0x60>
 8000640:	9b04      	ldr	r3, [sp, #16]
 8000642:	2008      	movs	r0, #8
 8000644:	4798      	blx	r3
 8000646:	2805      	cmp	r0, #5
 8000648:	4604      	mov	r4, r0
 800064a:	d00a      	beq.n	8000662 <__gnu_Unwind_Backtrace+0x62>
 800064c:	2809      	cmp	r0, #9
 800064e:	d007      	beq.n	8000660 <__gnu_Unwind_Backtrace+0x60>
 8000650:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000652:	4668      	mov	r0, sp
 8000654:	f7ff fe06 	bl	8000264 <get_eit_entry>
 8000658:	466a      	mov	r2, sp
 800065a:	210c      	movs	r1, #12
 800065c:	2800      	cmp	r0, #0
 800065e:	d0e6      	beq.n	800062e <__gnu_Unwind_Backtrace+0x2e>
 8000660:	2409      	movs	r4, #9
 8000662:	a816      	add	r0, sp, #88	; 0x58
 8000664:	f7ff fe4e 	bl	8000304 <restore_non_core_regs>
 8000668:	4620      	mov	r0, r4
 800066a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800066e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000670 <__gnu_unwind_pr_common>:
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	460d      	mov	r5, r1
 8000676:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000678:	b08b      	sub	sp, #44	; 0x2c
 800067a:	1d0c      	adds	r4, r1, #4
 800067c:	6809      	ldr	r1, [r1, #0]
 800067e:	9107      	str	r1, [sp, #28]
 8000680:	4691      	mov	r9, r2
 8000682:	9408      	str	r4, [sp, #32]
 8000684:	f000 0b03 	and.w	fp, r0, #3
 8000688:	461e      	mov	r6, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d160      	bne.n	8000750 <__gnu_unwind_pr_common+0xe0>
 800068e:	0209      	lsls	r1, r1, #8
 8000690:	2303      	movs	r3, #3
 8000692:	9107      	str	r1, [sp, #28]
 8000694:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000698:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800069c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800069e:	f1bb 0f02 	cmp.w	fp, #2
 80006a2:	bf08      	it	eq
 80006a4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006a6:	f013 0301 	ands.w	r3, r3, #1
 80006aa:	d140      	bne.n	800072e <__gnu_unwind_pr_common+0xbe>
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f000 0308 	and.w	r3, r0, #8
 80006b2:	9303      	str	r3, [sp, #12]
 80006b4:	f8d4 8000 	ldr.w	r8, [r4]
 80006b8:	f1b8 0f00 	cmp.w	r8, #0
 80006bc:	d039      	beq.n	8000732 <__gnu_unwind_pr_common+0xc2>
 80006be:	2e02      	cmp	r6, #2
 80006c0:	d043      	beq.n	800074a <__gnu_unwind_pr_common+0xda>
 80006c2:	f8b4 8000 	ldrh.w	r8, [r4]
 80006c6:	8867      	ldrh	r7, [r4, #2]
 80006c8:	3404      	adds	r4, #4
 80006ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006cc:	f027 0a01 	bic.w	sl, r7, #1
 80006d0:	210f      	movs	r1, #15
 80006d2:	4648      	mov	r0, r9
 80006d4:	449a      	add	sl, r3
 80006d6:	f7ff ff5f 	bl	8000598 <_Unwind_GetGR>
 80006da:	4582      	cmp	sl, r0
 80006dc:	d833      	bhi.n	8000746 <__gnu_unwind_pr_common+0xd6>
 80006de:	f028 0301 	bic.w	r3, r8, #1
 80006e2:	449a      	add	sl, r3
 80006e4:	4550      	cmp	r0, sl
 80006e6:	bf2c      	ite	cs
 80006e8:	2000      	movcs	r0, #0
 80006ea:	2001      	movcc	r0, #1
 80006ec:	007f      	lsls	r7, r7, #1
 80006ee:	f007 0702 	and.w	r7, r7, #2
 80006f2:	f008 0801 	and.w	r8, r8, #1
 80006f6:	ea47 0708 	orr.w	r7, r7, r8
 80006fa:	2f01      	cmp	r7, #1
 80006fc:	d03e      	beq.n	800077c <__gnu_unwind_pr_common+0x10c>
 80006fe:	d335      	bcc.n	800076c <__gnu_unwind_pr_common+0xfc>
 8000700:	2f02      	cmp	r7, #2
 8000702:	d11c      	bne.n	800073e <__gnu_unwind_pr_common+0xce>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800070a:	9202      	str	r2, [sp, #8]
 800070c:	f1bb 0f00 	cmp.w	fp, #0
 8000710:	d176      	bne.n	8000800 <__gnu_unwind_pr_common+0x190>
 8000712:	b128      	cbz	r0, 8000720 <__gnu_unwind_pr_common+0xb0>
 8000714:	9903      	ldr	r1, [sp, #12]
 8000716:	2900      	cmp	r1, #0
 8000718:	d07e      	beq.n	8000818 <__gnu_unwind_pr_common+0x1a8>
 800071a:	2a00      	cmp	r2, #0
 800071c:	f000 80a6 	beq.w	800086c <__gnu_unwind_pr_common+0x1fc>
 8000720:	2b00      	cmp	r3, #0
 8000722:	db77      	blt.n	8000814 <__gnu_unwind_pr_common+0x1a4>
 8000724:	9b02      	ldr	r3, [sp, #8]
 8000726:	3301      	adds	r3, #1
 8000728:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800072c:	e7c2      	b.n	80006b4 <__gnu_unwind_pr_common+0x44>
 800072e:	2300      	movs	r3, #0
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2e02      	cmp	r6, #2
 8000734:	dd3e      	ble.n	80007b4 <__gnu_unwind_pr_common+0x144>
 8000736:	f7ff fe17 	bl	8000368 <__gnu_unwind_24bit.isra.1>
 800073a:	2800      	cmp	r0, #0
 800073c:	d040      	beq.n	80007c0 <__gnu_unwind_pr_common+0x150>
 800073e:	2009      	movs	r0, #9
 8000740:	b00b      	add	sp, #44	; 0x2c
 8000742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000746:	2000      	movs	r0, #0
 8000748:	e7d0      	b.n	80006ec <__gnu_unwind_pr_common+0x7c>
 800074a:	6867      	ldr	r7, [r4, #4]
 800074c:	3408      	adds	r4, #8
 800074e:	e7bc      	b.n	80006ca <__gnu_unwind_pr_common+0x5a>
 8000750:	2b02      	cmp	r3, #2
 8000752:	dca3      	bgt.n	800069c <__gnu_unwind_pr_common+0x2c>
 8000754:	0c0b      	lsrs	r3, r1, #16
 8000756:	b2da      	uxtb	r2, r3
 8000758:	0409      	lsls	r1, r1, #16
 800075a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800075e:	2302      	movs	r3, #2
 8000760:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000764:	9107      	str	r1, [sp, #28]
 8000766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800076a:	e797      	b.n	800069c <__gnu_unwind_pr_common+0x2c>
 800076c:	f1bb 0f00 	cmp.w	fp, #0
 8000770:	d002      	beq.n	8000778 <__gnu_unwind_pr_common+0x108>
 8000772:	2800      	cmp	r0, #0
 8000774:	f040 80bd 	bne.w	80008f2 <__gnu_unwind_pr_common+0x282>
 8000778:	3404      	adds	r4, #4
 800077a:	e79b      	b.n	80006b4 <__gnu_unwind_pr_common+0x44>
 800077c:	f1bb 0f00 	cmp.w	fp, #0
 8000780:	d125      	bne.n	80007ce <__gnu_unwind_pr_common+0x15e>
 8000782:	b1a8      	cbz	r0, 80007b0 <__gnu_unwind_pr_common+0x140>
 8000784:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000788:	1c99      	adds	r1, r3, #2
 800078a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800078e:	d0d6      	beq.n	800073e <__gnu_unwind_pr_common+0xce>
 8000790:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000794:	3301      	adds	r3, #1
 8000796:	9106      	str	r1, [sp, #24]
 8000798:	f000 80a3 	beq.w	80008e2 <__gnu_unwind_pr_common+0x272>
 800079c:	1d20      	adds	r0, r4, #4
 800079e:	f7ff fddd 	bl	800035c <_Unwind_decode_typeinfo_ptr.isra.0>
 80007a2:	ab06      	add	r3, sp, #24
 80007a4:	4601      	mov	r1, r0
 80007a6:	4628      	mov	r0, r5
 80007a8:	f3af 8000 	nop.w
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d177      	bne.n	80008a0 <__gnu_unwind_pr_common+0x230>
 80007b0:	3408      	adds	r4, #8
 80007b2:	e77f      	b.n	80006b4 <__gnu_unwind_pr_common+0x44>
 80007b4:	a907      	add	r1, sp, #28
 80007b6:	4648      	mov	r0, r9
 80007b8:	f000 faee 	bl	8000d98 <__gnu_unwind_execute>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d1be      	bne.n	800073e <__gnu_unwind_pr_common+0xce>
 80007c0:	9b01      	ldr	r3, [sp, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d15c      	bne.n	8000880 <__gnu_unwind_pr_common+0x210>
 80007c6:	2008      	movs	r0, #8
 80007c8:	b00b      	add	sp, #44	; 0x2c
 80007ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ce:	210d      	movs	r1, #13
 80007d0:	4648      	mov	r0, r9
 80007d2:	6a2f      	ldr	r7, [r5, #32]
 80007d4:	f7ff fee0 	bl	8000598 <_Unwind_GetGR>
 80007d8:	4287      	cmp	r7, r0
 80007da:	d1e9      	bne.n	80007b0 <__gnu_unwind_pr_common+0x140>
 80007dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007de:	429c      	cmp	r4, r3
 80007e0:	d1e6      	bne.n	80007b0 <__gnu_unwind_pr_common+0x140>
 80007e2:	4620      	mov	r0, r4
 80007e4:	f7ff fcf0 	bl	80001c8 <selfrel_offset31>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4602      	mov	r2, r0
 80007ec:	4648      	mov	r0, r9
 80007ee:	f7ff fef9 	bl	80005e4 <_Unwind_SetGR>
 80007f2:	4648      	mov	r0, r9
 80007f4:	462a      	mov	r2, r5
 80007f6:	2100      	movs	r1, #0
 80007f8:	f7ff fef4 	bl	80005e4 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e79f      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 8000800:	210d      	movs	r1, #13
 8000802:	4648      	mov	r0, r9
 8000804:	6a2f      	ldr	r7, [r5, #32]
 8000806:	f7ff fec7 	bl	8000598 <_Unwind_GetGR>
 800080a:	4287      	cmp	r7, r0
 800080c:	d058      	beq.n	80008c0 <__gnu_unwind_pr_common+0x250>
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	da87      	bge.n	8000724 <__gnu_unwind_pr_common+0xb4>
 8000814:	3404      	adds	r4, #4
 8000816:	e785      	b.n	8000724 <__gnu_unwind_pr_common+0xb4>
 8000818:	9b02      	ldr	r3, [sp, #8]
 800081a:	b33b      	cbz	r3, 800086c <__gnu_unwind_pr_common+0x1fc>
 800081c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000820:	1d27      	adds	r7, r4, #4
 8000822:	f8cd b010 	str.w	fp, [sp, #16]
 8000826:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800082a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800082e:	9605      	str	r6, [sp, #20]
 8000830:	46a3      	mov	fp, r4
 8000832:	461c      	mov	r4, r3
 8000834:	e002      	b.n	800083c <__gnu_unwind_pr_common+0x1cc>
 8000836:	45b2      	cmp	sl, r6
 8000838:	46b0      	mov	r8, r6
 800083a:	d016      	beq.n	800086a <__gnu_unwind_pr_common+0x1fa>
 800083c:	4638      	mov	r0, r7
 800083e:	9406      	str	r4, [sp, #24]
 8000840:	f7ff fd8c 	bl	800035c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000844:	ab06      	add	r3, sp, #24
 8000846:	4601      	mov	r1, r0
 8000848:	2200      	movs	r2, #0
 800084a:	4628      	mov	r0, r5
 800084c:	f3af 8000 	nop.w
 8000850:	f108 0601 	add.w	r6, r8, #1
 8000854:	3704      	adds	r7, #4
 8000856:	2800      	cmp	r0, #0
 8000858:	d0ed      	beq.n	8000836 <__gnu_unwind_pr_common+0x1c6>
 800085a:	9b02      	ldr	r3, [sp, #8]
 800085c:	9e05      	ldr	r6, [sp, #20]
 800085e:	4543      	cmp	r3, r8
 8000860:	465c      	mov	r4, fp
 8000862:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000866:	d1d2      	bne.n	800080e <__gnu_unwind_pr_common+0x19e>
 8000868:	e000      	b.n	800086c <__gnu_unwind_pr_common+0x1fc>
 800086a:	465c      	mov	r4, fp
 800086c:	4648      	mov	r0, r9
 800086e:	210d      	movs	r1, #13
 8000870:	f7ff fe92 	bl	8000598 <_Unwind_GetGR>
 8000874:	9b06      	ldr	r3, [sp, #24]
 8000876:	6228      	str	r0, [r5, #32]
 8000878:	62ac      	str	r4, [r5, #40]	; 0x28
 800087a:	626b      	str	r3, [r5, #36]	; 0x24
 800087c:	2006      	movs	r0, #6
 800087e:	e75f      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 8000880:	210f      	movs	r1, #15
 8000882:	4648      	mov	r0, r9
 8000884:	f7ff fe88 	bl	8000598 <_Unwind_GetGR>
 8000888:	210e      	movs	r1, #14
 800088a:	4602      	mov	r2, r0
 800088c:	4648      	mov	r0, r9
 800088e:	f7ff fea9 	bl	80005e4 <_Unwind_SetGR>
 8000892:	4648      	mov	r0, r9
 8000894:	4a29      	ldr	r2, [pc, #164]	; (800093c <__gnu_unwind_pr_common+0x2cc>)
 8000896:	210f      	movs	r1, #15
 8000898:	f7ff fea4 	bl	80005e4 <_Unwind_SetGR>
 800089c:	2007      	movs	r0, #7
 800089e:	e74f      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 80008a0:	4607      	mov	r7, r0
 80008a2:	210d      	movs	r1, #13
 80008a4:	4648      	mov	r0, r9
 80008a6:	f7ff fe77 	bl	8000598 <_Unwind_GetGR>
 80008aa:	2f02      	cmp	r7, #2
 80008ac:	6228      	str	r0, [r5, #32]
 80008ae:	d11d      	bne.n	80008ec <__gnu_unwind_pr_common+0x27c>
 80008b0:	462b      	mov	r3, r5
 80008b2:	9a06      	ldr	r2, [sp, #24]
 80008b4:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008b8:	626b      	str	r3, [r5, #36]	; 0x24
 80008ba:	62ac      	str	r4, [r5, #40]	; 0x28
 80008bc:	2006      	movs	r0, #6
 80008be:	e73f      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 80008c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c2:	429c      	cmp	r4, r3
 80008c4:	d1a3      	bne.n	800080e <__gnu_unwind_pr_common+0x19e>
 80008c6:	2204      	movs	r2, #4
 80008c8:	2700      	movs	r7, #0
 80008ca:	18a3      	adds	r3, r4, r2
 80008cc:	9902      	ldr	r1, [sp, #8]
 80008ce:	62a9      	str	r1, [r5, #40]	; 0x28
 80008d0:	62ef      	str	r7, [r5, #44]	; 0x2c
 80008d2:	632a      	str	r2, [r5, #48]	; 0x30
 80008d4:	636b      	str	r3, [r5, #52]	; 0x34
 80008d6:	6823      	ldr	r3, [r4, #0]
 80008d8:	42bb      	cmp	r3, r7
 80008da:	db1d      	blt.n	8000918 <__gnu_unwind_pr_common+0x2a8>
 80008dc:	2301      	movs	r3, #1
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	e720      	b.n	8000724 <__gnu_unwind_pr_common+0xb4>
 80008e2:	4648      	mov	r0, r9
 80008e4:	210d      	movs	r1, #13
 80008e6:	f7ff fe57 	bl	8000598 <_Unwind_GetGR>
 80008ea:	6228      	str	r0, [r5, #32]
 80008ec:	9b06      	ldr	r3, [sp, #24]
 80008ee:	626b      	str	r3, [r5, #36]	; 0x24
 80008f0:	e7e3      	b.n	80008ba <__gnu_unwind_pr_common+0x24a>
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff fc68 	bl	80001c8 <selfrel_offset31>
 80008f8:	3404      	adds	r4, #4
 80008fa:	4606      	mov	r6, r0
 80008fc:	63ac      	str	r4, [r5, #56]	; 0x38
 80008fe:	4628      	mov	r0, r5
 8000900:	f3af 8000 	nop.w
 8000904:	2800      	cmp	r0, #0
 8000906:	f43f af1a 	beq.w	800073e <__gnu_unwind_pr_common+0xce>
 800090a:	4648      	mov	r0, r9
 800090c:	4632      	mov	r2, r6
 800090e:	210f      	movs	r1, #15
 8000910:	f7ff fe68 	bl	80005e4 <_Unwind_SetGR>
 8000914:	2007      	movs	r0, #7
 8000916:	e713      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 8000918:	4608      	mov	r0, r1
 800091a:	3001      	adds	r0, #1
 800091c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000920:	f7ff fc52 	bl	80001c8 <selfrel_offset31>
 8000924:	210f      	movs	r1, #15
 8000926:	4602      	mov	r2, r0
 8000928:	4648      	mov	r0, r9
 800092a:	f7ff fe5b 	bl	80005e4 <_Unwind_SetGR>
 800092e:	4648      	mov	r0, r9
 8000930:	462a      	mov	r2, r5
 8000932:	4639      	mov	r1, r7
 8000934:	f7ff fe56 	bl	80005e4 <_Unwind_SetGR>
 8000938:	2007      	movs	r0, #7
 800093a:	e701      	b.n	8000740 <__gnu_unwind_pr_common+0xd0>
 800093c:	00000000 	.word	0x00000000

08000940 <__aeabi_unwind_cpp_pr0>:
 8000940:	2300      	movs	r3, #0
 8000942:	e695      	b.n	8000670 <__gnu_unwind_pr_common>

08000944 <__aeabi_unwind_cpp_pr1>:
 8000944:	2301      	movs	r3, #1
 8000946:	e693      	b.n	8000670 <__gnu_unwind_pr_common>

08000948 <__aeabi_unwind_cpp_pr2>:
 8000948:	2302      	movs	r3, #2
 800094a:	e691      	b.n	8000670 <__gnu_unwind_pr_common>

0800094c <_Unwind_VRS_Pop>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	4604      	mov	r4, r0
 8000950:	b0c5      	sub	sp, #276	; 0x114
 8000952:	2904      	cmp	r1, #4
 8000954:	d80d      	bhi.n	8000972 <_Unwind_VRS_Pop+0x26>
 8000956:	e8df f001 	tbb	[pc, r1]
 800095a:	0353      	.short	0x0353
 800095c:	310c      	.short	0x310c
 800095e:	0f          	.byte	0x0f
 800095f:	00          	.byte	0x00
 8000960:	2b01      	cmp	r3, #1
 8000962:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000966:	b295      	uxth	r5, r2
 8000968:	d162      	bne.n	8000a30 <_Unwind_VRS_Pop+0xe4>
 800096a:	1972      	adds	r2, r6, r5
 800096c:	2a10      	cmp	r2, #16
 800096e:	f240 809b 	bls.w	8000aa8 <_Unwind_VRS_Pop+0x15c>
 8000972:	2002      	movs	r0, #2
 8000974:	b045      	add	sp, #276	; 0x114
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1fa      	bne.n	8000972 <_Unwind_VRS_Pop+0x26>
 800097c:	2a10      	cmp	r2, #16
 800097e:	d8f8      	bhi.n	8000972 <_Unwind_VRS_Pop+0x26>
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	06d8      	lsls	r0, r3, #27
 8000984:	f100 80c6 	bmi.w	8000b14 <_Unwind_VRS_Pop+0x1c8>
 8000988:	ae22      	add	r6, sp, #136	; 0x88
 800098a:	4630      	mov	r0, r6
 800098c:	9201      	str	r2, [sp, #4]
 800098e:	f000 f973 	bl	8000c78 <__gnu_Unwind_Save_WMMXC>
 8000992:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000994:	9a01      	ldr	r2, [sp, #4]
 8000996:	2300      	movs	r3, #0
 8000998:	2501      	movs	r5, #1
 800099a:	fa05 f103 	lsl.w	r1, r5, r3
 800099e:	4211      	tst	r1, r2
 80009a0:	d003      	beq.n	80009aa <_Unwind_VRS_Pop+0x5e>
 80009a2:	6801      	ldr	r1, [r0, #0]
 80009a4:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80009a8:	3004      	adds	r0, #4
 80009aa:	3301      	adds	r3, #1
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d1f4      	bne.n	800099a <_Unwind_VRS_Pop+0x4e>
 80009b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80009b2:	4630      	mov	r0, r6
 80009b4:	f000 f956 	bl	8000c64 <__gnu_Unwind_Restore_WMMXC>
 80009b8:	2000      	movs	r0, #0
 80009ba:	e7db      	b.n	8000974 <_Unwind_VRS_Pop+0x28>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d1d8      	bne.n	8000972 <_Unwind_VRS_Pop+0x26>
 80009c0:	0c15      	lsrs	r5, r2, #16
 80009c2:	b297      	uxth	r7, r2
 80009c4:	19eb      	adds	r3, r5, r7
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	d8d3      	bhi.n	8000972 <_Unwind_VRS_Pop+0x26>
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	071e      	lsls	r6, r3, #28
 80009ce:	f100 80b5 	bmi.w	8000b3c <_Unwind_VRS_Pop+0x1f0>
 80009d2:	ae22      	add	r6, sp, #136	; 0x88
 80009d4:	4630      	mov	r0, r6
 80009d6:	f000 f923 	bl	8000c20 <__gnu_Unwind_Save_WMMXD>
 80009da:	00ed      	lsls	r5, r5, #3
 80009dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009de:	b14f      	cbz	r7, 80009f4 <_Unwind_VRS_Pop+0xa8>
 80009e0:	3d04      	subs	r5, #4
 80009e2:	1971      	adds	r1, r6, r5
 80009e4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80009e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80009ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80009f0:	4283      	cmp	r3, r0
 80009f2:	d1f9      	bne.n	80009e8 <_Unwind_VRS_Pop+0x9c>
 80009f4:	4630      	mov	r0, r6
 80009f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80009f8:	f000 f8f0 	bl	8000bdc <__gnu_Unwind_Restore_WMMXD>
 80009fc:	2000      	movs	r0, #0
 80009fe:	e7b9      	b.n	8000974 <_Unwind_VRS_Pop+0x28>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1b6      	bne.n	8000972 <_Unwind_VRS_Pop+0x26>
 8000a04:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a06:	b297      	uxth	r7, r2
 8000a08:	1d20      	adds	r0, r4, #4
 8000a0a:	2601      	movs	r6, #1
 8000a0c:	fa06 f103 	lsl.w	r1, r6, r3
 8000a10:	4239      	tst	r1, r7
 8000a12:	f103 0301 	add.w	r3, r3, #1
 8000a16:	d002      	beq.n	8000a1e <_Unwind_VRS_Pop+0xd2>
 8000a18:	6829      	ldr	r1, [r5, #0]
 8000a1a:	6001      	str	r1, [r0, #0]
 8000a1c:	3504      	adds	r5, #4
 8000a1e:	2b10      	cmp	r3, #16
 8000a20:	f100 0004 	add.w	r0, r0, #4
 8000a24:	d1f2      	bne.n	8000a0c <_Unwind_VRS_Pop+0xc0>
 8000a26:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000a2a:	d13b      	bne.n	8000aa4 <_Unwind_VRS_Pop+0x158>
 8000a2c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a2e:	e7a1      	b.n	8000974 <_Unwind_VRS_Pop+0x28>
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d19e      	bne.n	8000972 <_Unwind_VRS_Pop+0x26>
 8000a34:	1977      	adds	r7, r6, r5
 8000a36:	2f20      	cmp	r7, #32
 8000a38:	d89b      	bhi.n	8000972 <_Unwind_VRS_Pop+0x26>
 8000a3a:	2e0f      	cmp	r6, #15
 8000a3c:	d966      	bls.n	8000b0c <_Unwind_VRS_Pop+0x1c0>
 8000a3e:	462f      	mov	r7, r5
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d13a      	bne.n	8000aba <_Unwind_VRS_Pop+0x16e>
 8000a44:	462a      	mov	r2, r5
 8000a46:	2700      	movs	r7, #0
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a4c:	dd72      	ble.n	8000b34 <_Unwind_VRS_Pop+0x1e8>
 8000a4e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000a52:	4601      	mov	r1, r0
 8000a54:	a844      	add	r0, sp, #272	; 0x110
 8000a56:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a5a:	388c      	subs	r0, #140	; 0x8c
 8000a5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a60:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d1f9      	bne.n	8000a5c <_Unwind_VRS_Pop+0x110>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	b197      	cbz	r7, 8000a92 <_Unwind_VRS_Pop+0x146>
 8000a6c:	2e10      	cmp	r6, #16
 8000a6e:	4632      	mov	r2, r6
 8000a70:	a944      	add	r1, sp, #272	; 0x110
 8000a72:	bf38      	it	cc
 8000a74:	2210      	movcc	r2, #16
 8000a76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a7a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a7e:	0079      	lsls	r1, r7, #1
 8000a80:	3a04      	subs	r2, #4
 8000a82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a86:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a8a:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a8e:	4288      	cmp	r0, r1
 8000a90:	d1f9      	bne.n	8000a86 <_Unwind_VRS_Pop+0x13a>
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d048      	beq.n	8000b28 <_Unwind_VRS_Pop+0x1dc>
 8000a96:	2e0f      	cmp	r6, #15
 8000a98:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a9a:	d933      	bls.n	8000b04 <_Unwind_VRS_Pop+0x1b8>
 8000a9c:	b117      	cbz	r7, 8000aa4 <_Unwind_VRS_Pop+0x158>
 8000a9e:	a802      	add	r0, sp, #8
 8000aa0:	f000 f894 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e765      	b.n	8000974 <_Unwind_VRS_Pop+0x28>
 8000aa8:	2e0f      	cmp	r6, #15
 8000aaa:	f63f af62 	bhi.w	8000972 <_Unwind_VRS_Pop+0x26>
 8000aae:	2700      	movs	r7, #0
 8000ab0:	6822      	ldr	r2, [r4, #0]
 8000ab2:	07d1      	lsls	r1, r2, #31
 8000ab4:	d417      	bmi.n	8000ae6 <_Unwind_VRS_Pop+0x19a>
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d060      	beq.n	8000b7c <_Unwind_VRS_Pop+0x230>
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	0751      	lsls	r1, r2, #29
 8000abe:	d445      	bmi.n	8000b4c <_Unwind_VRS_Pop+0x200>
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d04d      	beq.n	8000b60 <_Unwind_VRS_Pop+0x214>
 8000ac4:	2e0f      	cmp	r6, #15
 8000ac6:	d806      	bhi.n	8000ad6 <_Unwind_VRS_Pop+0x18a>
 8000ac8:	a822      	add	r0, sp, #136	; 0x88
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f000 f87a 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D>
 8000ad0:	9b01      	ldr	r3, [sp, #4]
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d0b6      	beq.n	8000a44 <_Unwind_VRS_Pop+0xf8>
 8000ad6:	a802      	add	r0, sp, #8
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	f000 f87b 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ade:	9b01      	ldr	r3, [sp, #4]
 8000ae0:	f1c6 0210 	rsb	r2, r6, #16
 8000ae4:	e7b0      	b.n	8000a48 <_Unwind_VRS_Pop+0xfc>
 8000ae6:	f022 0101 	bic.w	r1, r2, #1
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	6021      	str	r1, [r4, #0]
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	4620      	mov	r0, r4
 8000af2:	d03b      	beq.n	8000b6c <_Unwind_VRS_Pop+0x220>
 8000af4:	f022 0203 	bic.w	r2, r2, #3
 8000af8:	f840 2b48 	str.w	r2, [r0], #72
 8000afc:	f000 f85a 	bl	8000bb4 <__gnu_Unwind_Save_VFP>
 8000b00:	9b01      	ldr	r3, [sp, #4]
 8000b02:	e7d8      	b.n	8000ab6 <_Unwind_VRS_Pop+0x16a>
 8000b04:	a822      	add	r0, sp, #136	; 0x88
 8000b06:	f000 f859 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D>
 8000b0a:	e7c7      	b.n	8000a9c <_Unwind_VRS_Pop+0x150>
 8000b0c:	2f10      	cmp	r7, #16
 8000b0e:	d9ce      	bls.n	8000aae <_Unwind_VRS_Pop+0x162>
 8000b10:	3f10      	subs	r7, #16
 8000b12:	e7cd      	b.n	8000ab0 <_Unwind_VRS_Pop+0x164>
 8000b14:	f023 0310 	bic.w	r3, r3, #16
 8000b18:	6023      	str	r3, [r4, #0]
 8000b1a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b1e:	9201      	str	r2, [sp, #4]
 8000b20:	f000 f8aa 	bl	8000c78 <__gnu_Unwind_Save_WMMXC>
 8000b24:	9a01      	ldr	r2, [sp, #4]
 8000b26:	e72f      	b.n	8000988 <_Unwind_VRS_Pop+0x3c>
 8000b28:	3104      	adds	r1, #4
 8000b2a:	63a1      	str	r1, [r4, #56]	; 0x38
 8000b2c:	a822      	add	r0, sp, #136	; 0x88
 8000b2e:	f000 f83d 	bl	8000bac <__gnu_Unwind_Restore_VFP>
 8000b32:	e7b7      	b.n	8000aa4 <_Unwind_VRS_Pop+0x158>
 8000b34:	2f00      	cmp	r7, #0
 8000b36:	d199      	bne.n	8000a6c <_Unwind_VRS_Pop+0x120>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	e7aa      	b.n	8000a92 <_Unwind_VRS_Pop+0x146>
 8000b3c:	f023 0308 	bic.w	r3, r3, #8
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b46:	f000 f86b 	bl	8000c20 <__gnu_Unwind_Save_WMMXD>
 8000b4a:	e742      	b.n	80009d2 <_Unwind_VRS_Pop+0x86>
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f022 0204 	bic.w	r2, r2, #4
 8000b52:	f840 2bd0 	str.w	r2, [r0], #208
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	f000 f83c 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	e7af      	b.n	8000ac0 <_Unwind_VRS_Pop+0x174>
 8000b60:	a822      	add	r0, sp, #136	; 0x88
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	f000 f826 	bl	8000bb4 <__gnu_Unwind_Save_VFP>
 8000b68:	9b01      	ldr	r3, [sp, #4]
 8000b6a:	e7b9      	b.n	8000ae0 <_Unwind_VRS_Pop+0x194>
 8000b6c:	f041 0102 	orr.w	r1, r1, #2
 8000b70:	f840 1b48 	str.w	r1, [r0], #72
 8000b74:	f000 f826 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D>
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	e79c      	b.n	8000ab6 <_Unwind_VRS_Pop+0x16a>
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d003      	beq.n	8000b88 <_Unwind_VRS_Pop+0x23c>
 8000b80:	2e0f      	cmp	r6, #15
 8000b82:	f63f af5f 	bhi.w	8000a44 <_Unwind_VRS_Pop+0xf8>
 8000b86:	e79f      	b.n	8000ac8 <_Unwind_VRS_Pop+0x17c>
 8000b88:	a822      	add	r0, sp, #136	; 0x88
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	f000 f812 	bl	8000bb4 <__gnu_Unwind_Save_VFP>
 8000b90:	9b01      	ldr	r3, [sp, #4]
 8000b92:	e757      	b.n	8000a44 <_Unwind_VRS_Pop+0xf8>

08000b94 <__restore_core_regs>:
 8000b94:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b98:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	46a6      	mov	lr, r4
 8000ba0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ba4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ba8:	46e5      	mov	sp, ip
 8000baa:	bd00      	pop	{pc}

08000bac <__gnu_Unwind_Restore_VFP>:
 8000bac:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__gnu_Unwind_Save_VFP>:
 8000bb4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__gnu_Unwind_Restore_VFP_D>:
 8000bbc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gnu_Unwind_Save_VFP_D>:
 8000bc4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bcc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bd4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Restore_WMMXD>:
 8000bdc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000be0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000be4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000be8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bec:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bf0:	ecf0 5102 	ldfe	f5, [r0], #8
 8000bf4:	ecf0 6102 	ldfe	f6, [r0], #8
 8000bf8:	ecf0 7102 	ldfe	f7, [r0], #8
 8000bfc:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c00:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c04:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c08:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c0c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c10:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c14:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c18:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__gnu_Unwind_Save_WMMXD>:
 8000c20:	ece0 0102 	stfe	f0, [r0], #8
 8000c24:	ece0 1102 	stfe	f1, [r0], #8
 8000c28:	ece0 2102 	stfe	f2, [r0], #8
 8000c2c:	ece0 3102 	stfe	f3, [r0], #8
 8000c30:	ece0 4102 	stfe	f4, [r0], #8
 8000c34:	ece0 5102 	stfe	f5, [r0], #8
 8000c38:	ece0 6102 	stfe	f6, [r0], #8
 8000c3c:	ece0 7102 	stfe	f7, [r0], #8
 8000c40:	ece0 8102 	stfp	f0, [r0], #8
 8000c44:	ece0 9102 	stfp	f1, [r0], #8
 8000c48:	ece0 a102 	stfp	f2, [r0], #8
 8000c4c:	ece0 b102 	stfp	f3, [r0], #8
 8000c50:	ece0 c102 	stfp	f4, [r0], #8
 8000c54:	ece0 d102 	stfp	f5, [r0], #8
 8000c58:	ece0 e102 	stfp	f6, [r0], #8
 8000c5c:	ece0 f102 	stfp	f7, [r0], #8
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Restore_WMMXC>:
 8000c64:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c68:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c6c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c70:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__gnu_Unwind_Save_WMMXC>:
 8000c78:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c7c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c80:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c84:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <_Unwind_RaiseException>:
 8000c8c:	46ec      	mov	ip, sp
 8000c8e:	b500      	push	{lr}
 8000c90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca0:	a901      	add	r1, sp, #4
 8000ca2:	f7ff fbf3 	bl	800048c <__gnu_Unwind_RaiseException>
 8000ca6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000caa:	b012      	add	sp, #72	; 0x48
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <_Unwind_Resume>:
 8000cb0:	46ec      	mov	ip, sp
 8000cb2:	b500      	push	{lr}
 8000cb4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc4:	a901      	add	r1, sp, #4
 8000cc6:	f7ff fc1b 	bl	8000500 <__gnu_Unwind_Resume>
 8000cca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cce:	b012      	add	sp, #72	; 0x48
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <_Unwind_Resume_or_Rethrow>:
 8000cd4:	46ec      	mov	ip, sp
 8000cd6:	b500      	push	{lr}
 8000cd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cdc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ce8:	a901      	add	r1, sp, #4
 8000cea:	f7ff fc2b 	bl	8000544 <__gnu_Unwind_Resume_or_Rethrow>
 8000cee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cf2:	b012      	add	sp, #72	; 0x48
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <_Unwind_ForcedUnwind>:
 8000cf8:	46ec      	mov	ip, sp
 8000cfa:	b500      	push	{lr}
 8000cfc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d00:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d0c:	ab01      	add	r3, sp, #4
 8000d0e:	f7ff fbed 	bl	80004ec <__gnu_Unwind_ForcedUnwind>
 8000d12:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d16:	b012      	add	sp, #72	; 0x48
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_Backtrace>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	aa01      	add	r2, sp, #4
 8000d32:	f7ff fc65 	bl	8000600 <__gnu_Unwind_Backtrace>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <next_unwind_byte>:
 8000d40:	7a02      	ldrb	r2, [r0, #8]
 8000d42:	b91a      	cbnz	r2, 8000d4c <next_unwind_byte+0xc>
 8000d44:	7a43      	ldrb	r3, [r0, #9]
 8000d46:	b943      	cbnz	r3, 8000d5a <next_unwind_byte+0x1a>
 8000d48:	20b0      	movs	r0, #176	; 0xb0
 8000d4a:	4770      	bx	lr
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	3a01      	subs	r2, #1
 8000d50:	7202      	strb	r2, [r0, #8]
 8000d52:	021a      	lsls	r2, r3, #8
 8000d54:	6002      	str	r2, [r0, #0]
 8000d56:	0e18      	lsrs	r0, r3, #24
 8000d58:	4770      	bx	lr
 8000d5a:	6842      	ldr	r2, [r0, #4]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b410      	push	{r4}
 8000d60:	7243      	strb	r3, [r0, #9]
 8000d62:	6813      	ldr	r3, [r2, #0]
 8000d64:	2103      	movs	r1, #3
 8000d66:	1d14      	adds	r4, r2, #4
 8000d68:	7201      	strb	r1, [r0, #8]
 8000d6a:	021a      	lsls	r2, r3, #8
 8000d6c:	6044      	str	r4, [r0, #4]
 8000d6e:	6002      	str	r2, [r0, #0]
 8000d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d74:	0e18      	lsrs	r0, r3, #24
 8000d76:	4770      	bx	lr

08000d78 <_Unwind_GetGR.constprop.0>:
 8000d78:	b500      	push	{lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	aa03      	add	r2, sp, #12
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9200      	str	r2, [sp, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	220c      	movs	r2, #12
 8000d86:	f7ff fbed 	bl	8000564 <_Unwind_VRS_Get>
 8000d8a:	9803      	ldr	r0, [sp, #12]
 8000d8c:	b005      	add	sp, #20
 8000d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d92:	bf00      	nop

08000d94 <unwind_UCB_from_context>:
 8000d94:	e7f0      	b.n	8000d78 <_Unwind_GetGR.constprop.0>
 8000d96:	bf00      	nop

08000d98 <__gnu_unwind_execute>:
 8000d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	b085      	sub	sp, #20
 8000da0:	460f      	mov	r7, r1
 8000da2:	f04f 0800 	mov.w	r8, #0
 8000da6:	4638      	mov	r0, r7
 8000da8:	f7ff ffca 	bl	8000d40 <next_unwind_byte>
 8000dac:	28b0      	cmp	r0, #176	; 0xb0
 8000dae:	4604      	mov	r4, r0
 8000db0:	d023      	beq.n	8000dfa <__gnu_unwind_execute+0x62>
 8000db2:	0605      	lsls	r5, r0, #24
 8000db4:	d427      	bmi.n	8000e06 <__gnu_unwind_execute+0x6e>
 8000db6:	2300      	movs	r3, #0
 8000db8:	f10d 090c 	add.w	r9, sp, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	0085      	lsls	r5, r0, #2
 8000dc0:	220d      	movs	r2, #13
 8000dc2:	f8cd 9000 	str.w	r9, [sp]
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff fbcc 	bl	8000564 <_Unwind_VRS_Get>
 8000dcc:	b2ed      	uxtb	r5, r5
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	f8cd 9000 	str.w	r9, [sp]
 8000dd4:	0660      	lsls	r0, r4, #25
 8000dd6:	f105 0504 	add.w	r5, r5, #4
 8000dda:	bf4c      	ite	mi
 8000ddc:	1b5d      	submi	r5, r3, r5
 8000dde:	18ed      	addpl	r5, r5, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	220d      	movs	r2, #13
 8000de6:	4630      	mov	r0, r6
 8000de8:	9503      	str	r5, [sp, #12]
 8000dea:	f7ff fbe1 	bl	80005b0 <_Unwind_VRS_Set>
 8000dee:	4638      	mov	r0, r7
 8000df0:	f7ff ffa6 	bl	8000d40 <next_unwind_byte>
 8000df4:	28b0      	cmp	r0, #176	; 0xb0
 8000df6:	4604      	mov	r4, r0
 8000df8:	d1db      	bne.n	8000db2 <__gnu_unwind_execute+0x1a>
 8000dfa:	f1b8 0f00 	cmp.w	r8, #0
 8000dfe:	f000 8095 	beq.w	8000f2c <__gnu_unwind_execute+0x194>
 8000e02:	2000      	movs	r0, #0
 8000e04:	e01c      	b.n	8000e40 <__gnu_unwind_execute+0xa8>
 8000e06:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e0a:	2b80      	cmp	r3, #128	; 0x80
 8000e0c:	d05d      	beq.n	8000eca <__gnu_unwind_execute+0x132>
 8000e0e:	2b90      	cmp	r3, #144	; 0x90
 8000e10:	d019      	beq.n	8000e46 <__gnu_unwind_execute+0xae>
 8000e12:	2ba0      	cmp	r3, #160	; 0xa0
 8000e14:	d02c      	beq.n	8000e70 <__gnu_unwind_execute+0xd8>
 8000e16:	2bb0      	cmp	r3, #176	; 0xb0
 8000e18:	d03f      	beq.n	8000e9a <__gnu_unwind_execute+0x102>
 8000e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e1c:	d06c      	beq.n	8000ef8 <__gnu_unwind_execute+0x160>
 8000e1e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e22:	2bd0      	cmp	r3, #208	; 0xd0
 8000e24:	d10b      	bne.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000e26:	f000 0207 	and.w	r2, r0, #7
 8000e2a:	3201      	adds	r2, #1
 8000e2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e30:	2305      	movs	r3, #5
 8000e32:	2101      	movs	r1, #1
 8000e34:	4630      	mov	r0, r6
 8000e36:	f7ff fd89 	bl	800094c <_Unwind_VRS_Pop>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d0b3      	beq.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e3e:	2009      	movs	r0, #9
 8000e40:	b005      	add	sp, #20
 8000e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e46:	f000 030d 	and.w	r3, r0, #13
 8000e4a:	2b0d      	cmp	r3, #13
 8000e4c:	d0f7      	beq.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000e4e:	ad03      	add	r5, sp, #12
 8000e50:	2300      	movs	r3, #0
 8000e52:	f000 020f 	and.w	r2, r0, #15
 8000e56:	4619      	mov	r1, r3
 8000e58:	9500      	str	r5, [sp, #0]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	f7ff fb82 	bl	8000564 <_Unwind_VRS_Get>
 8000e60:	2300      	movs	r3, #0
 8000e62:	9500      	str	r5, [sp, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	220d      	movs	r2, #13
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f7ff fba1 	bl	80005b0 <_Unwind_VRS_Set>
 8000e6e:	e79a      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e70:	43c2      	mvns	r2, r0
 8000e72:	f002 0307 	and.w	r3, r2, #7
 8000e76:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e7a:	411a      	asrs	r2, r3
 8000e7c:	0701      	lsls	r1, r0, #28
 8000e7e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	bf48      	it	mi
 8000e88:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f7ff fd5c 	bl	800094c <_Unwind_VRS_Pop>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d1d2      	bne.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000e98:	e785      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e9a:	28b1      	cmp	r0, #177	; 0xb1
 8000e9c:	d057      	beq.n	8000f4e <__gnu_unwind_execute+0x1b6>
 8000e9e:	28b2      	cmp	r0, #178	; 0xb2
 8000ea0:	d068      	beq.n	8000f74 <__gnu_unwind_execute+0x1dc>
 8000ea2:	28b3      	cmp	r0, #179	; 0xb3
 8000ea4:	f000 8095 	beq.w	8000fd2 <__gnu_unwind_execute+0x23a>
 8000ea8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000eac:	2bb4      	cmp	r3, #180	; 0xb4
 8000eae:	d0c6      	beq.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000eb0:	f000 0207 	and.w	r2, r0, #7
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f7ff fd44 	bl	800094c <_Unwind_VRS_Pop>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d1ba      	bne.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000ec8:	e76d      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000eca:	4638      	mov	r0, r7
 8000ecc:	f7ff ff38 	bl	8000d40 <next_unwind_byte>
 8000ed0:	0224      	lsls	r4, r4, #8
 8000ed2:	4304      	orrs	r4, r0
 8000ed4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000ed8:	d0b1      	beq.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000eda:	0124      	lsls	r4, r4, #4
 8000edc:	2300      	movs	r3, #0
 8000ede:	b2a2      	uxth	r2, r4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f7ff fd32 	bl	800094c <_Unwind_VRS_Pop>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d1a8      	bne.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000eec:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000ef0:	bf18      	it	ne
 8000ef2:	f04f 0801 	movne.w	r8, #1
 8000ef6:	e756      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000ef8:	28c6      	cmp	r0, #198	; 0xc6
 8000efa:	d07d      	beq.n	8000ff8 <__gnu_unwind_execute+0x260>
 8000efc:	28c7      	cmp	r0, #199	; 0xc7
 8000efe:	f000 8086 	beq.w	800100e <__gnu_unwind_execute+0x276>
 8000f02:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f06:	2bc0      	cmp	r3, #192	; 0xc0
 8000f08:	f000 8094 	beq.w	8001034 <__gnu_unwind_execute+0x29c>
 8000f0c:	28c8      	cmp	r0, #200	; 0xc8
 8000f0e:	f000 809f 	beq.w	8001050 <__gnu_unwind_execute+0x2b8>
 8000f12:	28c9      	cmp	r0, #201	; 0xc9
 8000f14:	d193      	bne.n	8000e3e <__gnu_unwind_execute+0xa6>
 8000f16:	4638      	mov	r0, r7
 8000f18:	f7ff ff12 	bl	8000d40 <next_unwind_byte>
 8000f1c:	0302      	lsls	r2, r0, #12
 8000f1e:	f000 000f 	and.w	r0, r0, #15
 8000f22:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f26:	3001      	adds	r0, #1
 8000f28:	4302      	orrs	r2, r0
 8000f2a:	e781      	b.n	8000e30 <__gnu_unwind_execute+0x98>
 8000f2c:	ac03      	add	r4, sp, #12
 8000f2e:	4643      	mov	r3, r8
 8000f30:	220e      	movs	r2, #14
 8000f32:	4641      	mov	r1, r8
 8000f34:	9400      	str	r4, [sp, #0]
 8000f36:	4630      	mov	r0, r6
 8000f38:	f7ff fb14 	bl	8000564 <_Unwind_VRS_Get>
 8000f3c:	9400      	str	r4, [sp, #0]
 8000f3e:	4630      	mov	r0, r6
 8000f40:	4643      	mov	r3, r8
 8000f42:	220f      	movs	r2, #15
 8000f44:	4641      	mov	r1, r8
 8000f46:	f7ff fb33 	bl	80005b0 <_Unwind_VRS_Set>
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	e778      	b.n	8000e40 <__gnu_unwind_execute+0xa8>
 8000f4e:	4638      	mov	r0, r7
 8000f50:	f7ff fef6 	bl	8000d40 <next_unwind_byte>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	f43f af72 	beq.w	8000e3e <__gnu_unwind_execute+0xa6>
 8000f5a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f5e:	f47f af6e 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 8000f62:	4602      	mov	r2, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff fcf0 	bl	800094c <_Unwind_VRS_Pop>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	f47f af66 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 8000f72:	e718      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000f74:	2300      	movs	r3, #0
 8000f76:	f10d 090c 	add.w	r9, sp, #12
 8000f7a:	220d      	movs	r2, #13
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f8cd 9000 	str.w	r9, [sp]
 8000f82:	4630      	mov	r0, r6
 8000f84:	f7ff faee 	bl	8000564 <_Unwind_VRS_Get>
 8000f88:	4638      	mov	r0, r7
 8000f8a:	f7ff fed9 	bl	8000d40 <next_unwind_byte>
 8000f8e:	0602      	lsls	r2, r0, #24
 8000f90:	f04f 0402 	mov.w	r4, #2
 8000f94:	d50c      	bpl.n	8000fb0 <__gnu_unwind_execute+0x218>
 8000f96:	9b03      	ldr	r3, [sp, #12]
 8000f98:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f9c:	40a0      	lsls	r0, r4
 8000f9e:	4403      	add	r3, r0
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	9303      	str	r3, [sp, #12]
 8000fa4:	f7ff fecc 	bl	8000d40 <next_unwind_byte>
 8000fa8:	0603      	lsls	r3, r0, #24
 8000faa:	f104 0407 	add.w	r4, r4, #7
 8000fae:	d4f2      	bmi.n	8000f96 <__gnu_unwind_execute+0x1fe>
 8000fb0:	9b03      	ldr	r3, [sp, #12]
 8000fb2:	f8cd 9000 	str.w	r9, [sp]
 8000fb6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000fba:	40a2      	lsls	r2, r4
 8000fbc:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4414      	add	r4, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	220d      	movs	r2, #13
 8000fc8:	4630      	mov	r0, r6
 8000fca:	9403      	str	r4, [sp, #12]
 8000fcc:	f7ff faf0 	bl	80005b0 <_Unwind_VRS_Set>
 8000fd0:	e6e9      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000fd2:	4638      	mov	r0, r7
 8000fd4:	f7ff feb4 	bl	8000d40 <next_unwind_byte>
 8000fd8:	0301      	lsls	r1, r0, #12
 8000fda:	f000 000f 	and.w	r0, r0, #15
 8000fde:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fe2:	1c42      	adds	r2, r0, #1
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	4630      	mov	r0, r6
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fcae 	bl	800094c <_Unwind_VRS_Pop>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	f47f af24 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 8000ff6:	e6d6      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f7ff fea1 	bl	8000d40 <next_unwind_byte>
 8000ffe:	0301      	lsls	r1, r0, #12
 8001000:	f000 000f 	and.w	r0, r0, #15
 8001004:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001008:	1c42      	adds	r2, r0, #1
 800100a:	2303      	movs	r3, #3
 800100c:	e7eb      	b.n	8000fe6 <__gnu_unwind_execute+0x24e>
 800100e:	4638      	mov	r0, r7
 8001010:	f7ff fe96 	bl	8000d40 <next_unwind_byte>
 8001014:	2800      	cmp	r0, #0
 8001016:	f43f af12 	beq.w	8000e3e <__gnu_unwind_execute+0xa6>
 800101a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800101e:	f47f af0e 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 8001022:	4602      	mov	r2, r0
 8001024:	2104      	movs	r1, #4
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff fc90 	bl	800094c <_Unwind_VRS_Pop>
 800102c:	2800      	cmp	r0, #0
 800102e:	f47f af06 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 8001032:	e6b8      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8001034:	f000 020f 	and.w	r2, r0, #15
 8001038:	3201      	adds	r2, #1
 800103a:	2303      	movs	r3, #3
 800103c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001040:	4619      	mov	r1, r3
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fc82 	bl	800094c <_Unwind_VRS_Pop>
 8001048:	2800      	cmp	r0, #0
 800104a:	f47f aef8 	bne.w	8000e3e <__gnu_unwind_execute+0xa6>
 800104e:	e6aa      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8001050:	4638      	mov	r0, r7
 8001052:	f7ff fe75 	bl	8000d40 <next_unwind_byte>
 8001056:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800105a:	f000 030f 	and.w	r3, r0, #15
 800105e:	3210      	adds	r2, #16
 8001060:	3301      	adds	r3, #1
 8001062:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001066:	e6e3      	b.n	8000e30 <__gnu_unwind_execute+0x98>

08001068 <__gnu_unwind_frame>:
 8001068:	b510      	push	{r4, lr}
 800106a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800106c:	b084      	sub	sp, #16
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	2003      	movs	r0, #3
 8001072:	f88d 000c 	strb.w	r0, [sp, #12]
 8001076:	79dc      	ldrb	r4, [r3, #7]
 8001078:	f88d 400d 	strb.w	r4, [sp, #13]
 800107c:	0212      	lsls	r2, r2, #8
 800107e:	3308      	adds	r3, #8
 8001080:	4608      	mov	r0, r1
 8001082:	a901      	add	r1, sp, #4
 8001084:	9201      	str	r2, [sp, #4]
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	f7ff fe86 	bl	8000d98 <__gnu_unwind_execute>
 800108c:	b004      	add	sp, #16
 800108e:	bd10      	pop	{r4, pc}

08001090 <_Unwind_GetRegionStart>:
 8001090:	b508      	push	{r3, lr}
 8001092:	f7ff fe7f 	bl	8000d94 <unwind_UCB_from_context>
 8001096:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001098:	bd08      	pop	{r3, pc}
 800109a:	bf00      	nop

0800109c <_Unwind_GetLanguageSpecificData>:
 800109c:	b508      	push	{r3, lr}
 800109e:	f7ff fe79 	bl	8000d94 <unwind_UCB_from_context>
 80010a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010a4:	79c3      	ldrb	r3, [r0, #7]
 80010a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80010aa:	3008      	adds	r0, #8
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop

080010b0 <_Unwind_GetTextRelBase>:
 80010b0:	b508      	push	{r3, lr}
 80010b2:	f001 fad4 	bl	800265e <abort>
 80010b6:	bf00      	nop

080010b8 <_Unwind_GetDataRelBase>:
 80010b8:	b508      	push	{r3, lr}
 80010ba:	f7ff fff9 	bl	80010b0 <_Unwind_GetTextRelBase>
 80010be:	bf00      	nop

080010c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_InitTick+0x3c>)
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_InitTick+0x40>)
{
 80010c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d2:	6810      	ldr	r0, [r2, #0]
 80010d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d8:	f000 fa88 	bl	80015ec <HAL_SYSTICK_Config>
 80010dc:	4604      	mov	r4, r0
 80010de:	b958      	cbnz	r0, 80010f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	2d0f      	cmp	r5, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	4602      	mov	r2, r0
 80010e6:	4629      	mov	r1, r5
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 fa3e 	bl	800156c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_InitTick+0x44>)
 80010f2:	4620      	mov	r0, r4
 80010f4:	601d      	str	r5, [r3, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x20>)
{
 800110a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 fa17 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ffd0 	bl	80010c0 <HAL_InitTick>
  HAL_MspInit();
 8001120:	f001 f978 	bl	8002414 <HAL_MspInit>
}
 8001124:	2000      	movs	r0, #0
 8001126:	bd08      	pop	{r3, pc}
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x10>)
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_IncTick+0x14>)
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	440b      	add	r3, r1
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200000b4 	.word	0x200000b4
 8001140:	20000000 	.word	0x20000000

08001144 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001144:	4b01      	ldr	r3, [pc, #4]	; (800114c <HAL_GetTick+0x8>)
 8001146:	6818      	ldr	r0, [r3, #0]
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200000b4 	.word	0x200000b4

08001150 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001150:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001152:	4604      	mov	r4, r0
 8001154:	2800      	cmp	r0, #0
 8001156:	d06e      	beq.n	8001236 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001158:	f890 3020 	ldrb.w	r3, [r0, #32]
 800115c:	b90b      	cbnz	r3, 8001162 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800115e:	f001 f867 	bl	8002230 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f023 0302 	bic.w	r3, r3, #2
 800116a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff ffea 	bl	8001144 <HAL_GetTick>
 8001170:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	0791      	lsls	r1, r2, #30
 8001178:	d451      	bmi.n	800121e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001182:	f7ff ffdf 	bl	8001144 <HAL_GetTick>
 8001186:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	07d2      	lsls	r2, r2, #31
 800118e:	d554      	bpl.n	800123a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001190:	7e22      	ldrb	r2, [r4, #24]
 8001192:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	bf0c      	ite	eq
 8001198:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800119c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011a2:	7e62      	ldrb	r2, [r4, #25]
 80011a4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	bf0c      	ite	eq
 80011aa:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ae:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011b4:	7ea2      	ldrb	r2, [r4, #26]
 80011b6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	bf0c      	ite	eq
 80011bc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011c0:	f022 0220 	bicne.w	r2, r2, #32
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011c6:	7ee2      	ldrb	r2, [r4, #27]
 80011c8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	bf0c      	ite	eq
 80011ce:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d2:	f042 0210 	orrne.w	r2, r2, #16
 80011d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d8:	7f22      	ldrb	r2, [r4, #28]
 80011da:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	bf0c      	ite	eq
 80011e0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e4:	f022 0208 	bicne.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ea:	7f62      	ldrb	r2, [r4, #29]
 80011ec:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	bf0c      	ite	eq
 80011f2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f6:	f022 0204 	bicne.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011fc:	68e1      	ldr	r1, [r4, #12]
 80011fe:	68a2      	ldr	r2, [r4, #8]
 8001200:	430a      	orrs	r2, r1
 8001202:	6921      	ldr	r1, [r4, #16]
 8001204:	430a      	orrs	r2, r1
 8001206:	6961      	ldr	r1, [r4, #20]
 8001208:	430a      	orrs	r2, r1
 800120a:	6861      	ldr	r1, [r4, #4]
 800120c:	3901      	subs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001212:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001214:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001216:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001218:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800121c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121e:	f7ff ff91 	bl	8001144 <HAL_GetTick>
 8001222:	1b40      	subs	r0, r0, r5
 8001224:	280a      	cmp	r0, #10
 8001226:	d9a4      	bls.n	8001172 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800122a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001230:	2305      	movs	r3, #5
 8001232:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001236:	2001      	movs	r0, #1
}
 8001238:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123a:	f7ff ff83 	bl	8001144 <HAL_GetTick>
 800123e:	1b40      	subs	r0, r0, r5
 8001240:	280a      	cmp	r0, #10
 8001242:	d9a1      	bls.n	8001188 <HAL_CAN_Init+0x38>
 8001244:	e7f0      	b.n	8001228 <HAL_CAN_Init+0xd8>

08001246 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001246:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001248:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800124c:	3c01      	subs	r4, #1
 800124e:	2c01      	cmp	r4, #1
 8001250:	d86b      	bhi.n	800132a <HAL_CAN_GetRxMessage+0xe4>
 8001252:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001254:	b941      	cbnz	r1, 8001268 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001256:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001258:	07a4      	lsls	r4, r4, #30
 800125a:	d107      	bne.n	800126c <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800125e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001262:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001264:	2001      	movs	r0, #1
  }
}
 8001266:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001268:	6934      	ldr	r4, [r6, #16]
 800126a:	e7f5      	b.n	8001258 <HAL_CAN_GetRxMessage+0x12>
 800126c:	010c      	lsls	r4, r1, #4
 800126e:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001270:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001274:	f007 0704 	and.w	r7, r7, #4
 8001278:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800127a:	2f00      	cmp	r7, #0
 800127c:	d14b      	bne.n	8001316 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800127e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001282:	0d7f      	lsrs	r7, r7, #21
 8001284:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001286:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800128a:	f3c7 0740 	ubfx	r7, r7, #1, #1
 800128e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001290:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001294:	f007 070f 	and.w	r7, r7, #15
 8001298:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800129a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800129e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012a2:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012a8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012aa:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012ac:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012ae:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80012b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012b4:	6802      	ldr	r2, [r0, #0]
 80012b6:	4422      	add	r2, r4
 80012b8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80012bc:	0a12      	lsrs	r2, r2, #8
 80012be:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012c0:	6802      	ldr	r2, [r0, #0]
 80012c2:	4422      	add	r2, r4
 80012c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80012c8:	0c12      	lsrs	r2, r2, #16
 80012ca:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	4422      	add	r2, r4
 80012d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80012d4:	0e12      	lsrs	r2, r2, #24
 80012d6:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012d8:	6802      	ldr	r2, [r0, #0]
 80012da:	4422      	add	r2, r4
 80012dc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80012e0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012e2:	6802      	ldr	r2, [r0, #0]
 80012e4:	4422      	add	r2, r4
 80012e6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80012ea:	0a12      	lsrs	r2, r2, #8
 80012ec:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012ee:	6802      	ldr	r2, [r0, #0]
 80012f0:	4422      	add	r2, r4
 80012f2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80012f6:	0c12      	lsrs	r2, r2, #16
 80012f8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012fa:	6802      	ldr	r2, [r0, #0]
 80012fc:	4414      	add	r4, r2
 80012fe:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001302:	0e12      	lsrs	r2, r2, #24
 8001304:	71da      	strb	r2, [r3, #7]
 8001306:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001308:	b951      	cbnz	r1, 8001320 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	f042 0220 	orr.w	r2, r2, #32
 8001310:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8001312:	2000      	movs	r0, #0
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001316:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800131a:	08ff      	lsrs	r7, r7, #3
 800131c:	6057      	str	r7, [r2, #4]
 800131e:	e7b2      	b.n	8001286 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	e7f3      	b.n	8001312 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	e797      	b.n	8001262 <HAL_CAN_GetRxMessage+0x1c>

08001332 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001334:	4770      	bx	lr

08001336 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_TxMailbox0AbortCallback>:
 8001338:	4770      	bx	lr

0800133a <HAL_CAN_TxMailbox1AbortCallback>:
 800133a:	4770      	bx	lr

0800133c <HAL_CAN_TxMailbox2AbortCallback>:
 800133c:	4770      	bx	lr

0800133e <HAL_CAN_RxFifo0FullCallback>:
 800133e:	4770      	bx	lr

08001340 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001340:	4770      	bx	lr

08001342 <HAL_CAN_RxFifo1FullCallback>:
 8001342:	4770      	bx	lr

08001344 <HAL_CAN_SleepCallback>:
 8001344:	4770      	bx	lr

08001346 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001346:	4770      	bx	lr

08001348 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001348:	4770      	bx	lr

0800134a <HAL_CAN_IRQHandler>:
{
 800134a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800134e:	6803      	ldr	r3, [r0, #0]
 8001350:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001352:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001356:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001358:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800135c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001360:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001364:	f016 0401 	ands.w	r4, r6, #1
{
 8001368:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800136a:	d022      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800136c:	f017 0401 	ands.w	r4, r7, #1
 8001370:	d007      	beq.n	8001382 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001372:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001374:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001376:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001378:	f140 80a3 	bpl.w	80014c2 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800137c:	f7ff ffd9 	bl	8001332 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001380:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001382:	05fb      	lsls	r3, r7, #23
 8001384:	d509      	bpl.n	800139a <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800138c:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800138e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001390:	f140 80a5 	bpl.w	80014de <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001394:	4628      	mov	r0, r5
 8001396:	f7ff ffcd 	bl	8001334 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800139a:	03fb      	lsls	r3, r7, #15
 800139c:	d509      	bpl.n	80013b2 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013a4:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013a6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013a8:	f140 80a7 	bpl.w	80014fa <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013ac:	4628      	mov	r0, r5
 80013ae:	f7ff ffc2 	bl	8001336 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013b2:	0733      	lsls	r3, r6, #28
 80013b4:	d507      	bpl.n	80013c6 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013b6:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013ba:	bf1f      	itttt	ne
 80013bc:	682b      	ldrne	r3, [r5, #0]
 80013be:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013c0:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013c4:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013c6:	0777      	lsls	r7, r6, #29
 80013c8:	d508      	bpl.n	80013dc <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013ca:	f01b 0f08 	tst.w	fp, #8
 80013ce:	d005      	beq.n	80013dc <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	2208      	movs	r2, #8
 80013d4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013d6:	4628      	mov	r0, r5
 80013d8:	f7ff ffb1 	bl	800133e <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013dc:	07b0      	lsls	r0, r6, #30
 80013de:	d506      	bpl.n	80013ee <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0799      	lsls	r1, r3, #30
 80013e6:	d002      	beq.n	80013ee <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013e8:	4628      	mov	r0, r5
 80013ea:	f000 fee7 	bl	80021bc <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013ee:	0672      	lsls	r2, r6, #25
 80013f0:	d507      	bpl.n	8001402 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013f2:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013f6:	bf1f      	itttt	ne
 80013f8:	682b      	ldrne	r3, [r5, #0]
 80013fa:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013fc:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001400:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001402:	06b3      	lsls	r3, r6, #26
 8001404:	d508      	bpl.n	8001418 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001406:	f01a 0f08 	tst.w	sl, #8
 800140a:	d005      	beq.n	8001418 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001412:	4628      	mov	r0, r5
 8001414:	f7ff ff95 	bl	8001342 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001418:	06f7      	lsls	r7, r6, #27
 800141a:	d506      	bpl.n	800142a <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	0798      	lsls	r0, r3, #30
 8001422:	d002      	beq.n	800142a <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001424:	4628      	mov	r0, r5
 8001426:	f7ff ff8b 	bl	8001340 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800142a:	03b1      	lsls	r1, r6, #14
 800142c:	d508      	bpl.n	8001440 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800142e:	f019 0f10 	tst.w	r9, #16
 8001432:	d005      	beq.n	8001440 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	2210      	movs	r2, #16
 8001438:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800143a:	4628      	mov	r0, r5
 800143c:	f7ff ff82 	bl	8001344 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001440:	03f2      	lsls	r2, r6, #15
 8001442:	d508      	bpl.n	8001456 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001444:	f019 0f08 	tst.w	r9, #8
 8001448:	d005      	beq.n	8001456 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	2208      	movs	r2, #8
 800144e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff ff78 	bl	8001346 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001456:	0433      	lsls	r3, r6, #16
 8001458:	d52a      	bpl.n	80014b0 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800145a:	f019 0f04 	tst.w	r9, #4
 800145e:	682a      	ldr	r2, [r5, #0]
 8001460:	d024      	beq.n	80014ac <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001462:	05f7      	lsls	r7, r6, #23
 8001464:	d504      	bpl.n	8001470 <HAL_CAN_IRQHandler+0x126>
 8001466:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800146a:	bf18      	it	ne
 800146c:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001470:	05b0      	lsls	r0, r6, #22
 8001472:	d504      	bpl.n	800147e <HAL_CAN_IRQHandler+0x134>
 8001474:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8001478:	bf18      	it	ne
 800147a:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800147e:	0571      	lsls	r1, r6, #21
 8001480:	d504      	bpl.n	800148c <HAL_CAN_IRQHandler+0x142>
 8001482:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8001486:	bf18      	it	ne
 8001488:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800148c:	0533      	lsls	r3, r6, #20
 800148e:	d50d      	bpl.n	80014ac <HAL_CAN_IRQHandler+0x162>
 8001490:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8001494:	d00a      	beq.n	80014ac <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8001496:	2b30      	cmp	r3, #48	; 0x30
 8001498:	d04c      	beq.n	8001534 <HAL_CAN_IRQHandler+0x1ea>
 800149a:	d83c      	bhi.n	8001516 <HAL_CAN_IRQHandler+0x1cc>
 800149c:	2b10      	cmp	r3, #16
 800149e:	d043      	beq.n	8001528 <HAL_CAN_IRQHandler+0x1de>
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d044      	beq.n	800152e <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014a4:	6993      	ldr	r3, [r2, #24]
 80014a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014aa:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014ac:	2304      	movs	r3, #4
 80014ae:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014b0:	b12c      	cbz	r4, 80014be <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80014b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80014b4:	431c      	orrs	r4, r3
 80014b6:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80014b8:	4628      	mov	r0, r5
 80014ba:	f7ff ff45 	bl	8001348 <HAL_CAN_ErrorCallback>
 80014be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014c2:	077a      	lsls	r2, r7, #29
 80014c4:	d405      	bmi.n	80014d2 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014c6:	f017 0408 	ands.w	r4, r7, #8
 80014ca:	d105      	bne.n	80014d8 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014cc:	f7ff ff34 	bl	8001338 <HAL_CAN_TxMailbox0AbortCallback>
 80014d0:	e757      	b.n	8001382 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80014d6:	e754      	b.n	8001382 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80014dc:	e751      	b.n	8001382 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014de:	0579      	lsls	r1, r7, #21
 80014e0:	d502      	bpl.n	80014e8 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014e2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80014e6:	e758      	b.n	800139a <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014e8:	053a      	lsls	r2, r7, #20
 80014ea:	d502      	bpl.n	80014f2 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014ec:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80014f0:	e753      	b.n	800139a <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014f2:	4628      	mov	r0, r5
 80014f4:	f7ff ff21 	bl	800133a <HAL_CAN_TxMailbox1AbortCallback>
 80014f8:	e74f      	b.n	800139a <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014fa:	0379      	lsls	r1, r7, #13
 80014fc:	d502      	bpl.n	8001504 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014fe:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001502:	e756      	b.n	80013b2 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001504:	033a      	lsls	r2, r7, #12
 8001506:	d502      	bpl.n	800150e <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001508:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800150c:	e751      	b.n	80013b2 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff ff14 	bl	800133c <HAL_CAN_TxMailbox2AbortCallback>
 8001514:	e74d      	b.n	80013b2 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8001516:	2b50      	cmp	r3, #80	; 0x50
 8001518:	d00f      	beq.n	800153a <HAL_CAN_IRQHandler+0x1f0>
 800151a:	2b60      	cmp	r3, #96	; 0x60
 800151c:	d010      	beq.n	8001540 <HAL_CAN_IRQHandler+0x1f6>
 800151e:	2b40      	cmp	r3, #64	; 0x40
 8001520:	d1c0      	bne.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001522:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8001526:	e7bd      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001528:	f044 0408 	orr.w	r4, r4, #8
            break;
 800152c:	e7ba      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800152e:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001532:	e7b7      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001534:	f044 0420 	orr.w	r4, r4, #32
            break;
 8001538:	e7b4      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800153a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800153e:	e7b1      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001540:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8001544:	e7ae      	b.n	80014a4 <HAL_CAN_IRQHandler+0x15a>
	...

08001548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800154a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001558:	0200      	lsls	r0, r0, #8
 800155a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001562:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001564:	60d3      	str	r3, [r2, #12]
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b530      	push	{r4, r5, lr}
 8001570:	68dc      	ldr	r4, [r3, #12]
 8001572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001576:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	2b04      	cmp	r3, #4
 800157e:	bf28      	it	cs
 8001580:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 0501 	mov.w	r5, #1
 8001588:	fa05 f303 	lsl.w	r3, r5, r3
 800158c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001590:	bf8c      	ite	hi
 8001592:	3c03      	subhi	r4, #3
 8001594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001596:	4019      	ands	r1, r3
 8001598:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159a:	fa05 f404 	lsl.w	r4, r5, r4
 800159e:	3c01      	subs	r4, #1
 80015a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80015a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	ea42 0201 	orr.w	r2, r2, r1
 80015a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	bfaf      	iteee	ge
 80015ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	f000 000f 	andlt.w	r0, r0, #15
 80015b6:	4b06      	ldrlt	r3, [pc, #24]	; (80015d0 <HAL_NVIC_SetPriority+0x64>)
 80015b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	bfa5      	ittet	ge
 80015bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015c8:	bd30      	pop	{r4, r5, pc}
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	e000ed14 	.word	0xe000ed14

080015d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015d4:	0942      	lsrs	r2, r0, #5
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 001f 	and.w	r0, r0, #31
 80015dc:	fa03 f000 	lsl.w	r0, r3, r0
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_NVIC_EnableIRQ+0x14>)
 80015e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100

080015ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	3801      	subs	r0, #1
 80015ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015f2:	d20a      	bcs.n	800160a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	21f0      	movs	r1, #240	; 0xf0
 80015fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800161c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800161e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001788 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001624:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001626:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001628:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800162c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800162e:	9c01      	ldr	r4, [sp, #4]
 8001630:	40dc      	lsrs	r4, r3
 8001632:	d102      	bne.n	800163a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001634:	b005      	add	sp, #20
 8001636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800163a:	2401      	movs	r4, #1
 800163c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001640:	9c01      	ldr	r4, [sp, #4]
 8001642:	ea14 050a 	ands.w	r5, r4, sl
 8001646:	f000 8093 	beq.w	8001770 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	684c      	ldr	r4, [r1, #4]
 800164c:	f024 0b10 	bic.w	fp, r4, #16
 8001650:	f1bb 0f02 	cmp.w	fp, #2
 8001654:	d111      	bne.n	800167a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001656:	08df      	lsrs	r7, r3, #3
 8001658:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001660:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001666:	fa09 fc0e 	lsl.w	ip, r9, lr
 800166a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166e:	690e      	ldr	r6, [r1, #16]
 8001670:	fa06 f60e 	lsl.w	r6, r6, lr
 8001674:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001678:	623e      	str	r6, [r7, #32]
 800167a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001680:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	fa07 f70c 	lsl.w	r7, r7, ip
 8001686:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001692:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800169e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	d811      	bhi.n	80016c6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80016a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a8:	68ce      	ldr	r6, [r1, #12]
 80016aa:	fa06 fe0c 	lsl.w	lr, r6, ip
 80016ae:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80016b2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80016b4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ba:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80016be:	409e      	lsls	r6, r3
 80016c0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80016c4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80016c6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ca:	688e      	ldr	r6, [r1, #8]
 80016cc:	fa06 f60c 	lsl.w	r6, r6, ip
 80016d0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80016d4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d6:	d54b      	bpl.n	8001770 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80016dc:	f046 0601 	orr.w	r6, r6, #1
 80016e0:	f8c8 6018 	str.w	r6, [r8, #24]
 80016e4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80016e8:	f023 0703 	bic.w	r7, r3, #3
 80016ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016f0:	f006 0601 	and.w	r6, r6, #1
 80016f4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80016f8:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80016fa:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001700:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001702:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001706:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800170a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800170e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001712:	d02f      	beq.n	8001774 <HAL_GPIO_Init+0x15c>
 8001714:	4e1b      	ldr	r6, [pc, #108]	; (8001784 <HAL_GPIO_Init+0x16c>)
 8001716:	42b0      	cmp	r0, r6
 8001718:	d02e      	beq.n	8001778 <HAL_GPIO_Init+0x160>
 800171a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800171e:	42b0      	cmp	r0, r6
 8001720:	d02c      	beq.n	800177c <HAL_GPIO_Init+0x164>
 8001722:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001726:	42b0      	cmp	r0, r6
 8001728:	bf14      	ite	ne
 800172a:	2605      	movne	r6, #5
 800172c:	2603      	moveq	r6, #3
 800172e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001732:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001736:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001738:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800173a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001740:	bf0c      	ite	eq
 8001742:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001744:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001746:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001748:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800174e:	bf0c      	ite	eq
 8001750:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001752:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001754:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001756:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800175c:	bf0c      	ite	eq
 800175e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001760:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001762:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001764:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001766:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001768:	bf54      	ite	pl
 800176a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800176c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800176e:	60d6      	str	r6, [r2, #12]
    position++;
 8001770:	3301      	adds	r3, #1
 8001772:	e75c      	b.n	800162e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001774:	2600      	movs	r6, #0
 8001776:	e7da      	b.n	800172e <HAL_GPIO_Init+0x116>
 8001778:	2601      	movs	r6, #1
 800177a:	e7d8      	b.n	800172e <HAL_GPIO_Init+0x116>
 800177c:	2602      	movs	r6, #2
 800177e:	e7d6      	b.n	800172e <HAL_GPIO_Init+0x116>
 8001780:	40010400 	.word	0x40010400
 8001784:	48000400 	.word	0x48000400
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	b10a      	cbz	r2, 8001792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	6181      	str	r1, [r0, #24]
 8001790:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	6281      	str	r1, [r0, #40]	; 0x28
 8001794:	4770      	bx	lr
	...

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	4605      	mov	r5, r0
 800179e:	b918      	cbnz	r0, 80017a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80017a2:	b002      	add	sp, #8
 80017a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a8:	6803      	ldr	r3, [r0, #0]
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d411      	bmi.n	80017d2 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	682b      	ldr	r3, [r5, #0]
 80017b0:	079b      	lsls	r3, r3, #30
 80017b2:	f100 8085 	bmi.w	80018c0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	071c      	lsls	r4, r3, #28
 80017ba:	f100 80f6 	bmi.w	80019aa <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	0758      	lsls	r0, r3, #29
 80017c2:	f100 813f 	bmi.w	8001a44 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	69ea      	ldr	r2, [r5, #28]
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	f040 81d6 	bne.w	8001b7a <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80017ce:	2000      	movs	r0, #0
 80017d0:	e7e7      	b.n	80017a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017d2:	4cba      	ldr	r4, [pc, #744]	; (8001abc <HAL_RCC_OscConfig+0x324>)
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d007      	beq.n	80017ee <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017de:	6863      	ldr	r3, [r4, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d116      	bne.n	8001816 <HAL_RCC_OscConfig+0x7e>
 80017e8:	6863      	ldr	r3, [r4, #4]
 80017ea:	03df      	lsls	r7, r3, #15
 80017ec:	d513      	bpl.n	8001816 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	6821      	ldr	r1, [r4, #0]
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2201      	movs	r2, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	420b      	tst	r3, r1
 800180c:	d0cf      	beq.n	80017ae <HAL_RCC_OscConfig+0x16>
 800180e:	686b      	ldr	r3, [r5, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1cc      	bne.n	80017ae <HAL_RCC_OscConfig+0x16>
 8001814:	e7c4      	b.n	80017a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001816:	686a      	ldr	r2, [r5, #4]
 8001818:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800181c:	d125      	bne.n	800186a <HAL_RCC_OscConfig+0xd2>
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001828:	68a9      	ldr	r1, [r5, #8]
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	430b      	orrs	r3, r1
 8001830:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001832:	b352      	cbz	r2, 800188a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8001834:	f7ff fc86 	bl	8001144 <HAL_GetTick>
 8001838:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800183c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	2701      	movs	r7, #1
 8001840:	fa96 f3a6 	rbit	r3, r6
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	fa96 f3a6 	rbit	r3, r6
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	fa07 f303 	lsl.w	r3, r7, r3
 8001856:	4213      	tst	r3, r2
 8001858:	d1a9      	bne.n	80017ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff fc73 	bl	8001144 <HAL_GetTick>
 800185e:	eba0 0008 	sub.w	r0, r0, r8
 8001862:	2864      	cmp	r0, #100	; 0x64
 8001864:	d9ec      	bls.n	8001840 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8001866:	2003      	movs	r0, #3
 8001868:	e79b      	b.n	80017a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	b932      	cbnz	r2, 800187c <HAL_RCC_OscConfig+0xe4>
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6023      	str	r3, [r4, #0]
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	e7d3      	b.n	8001824 <HAL_RCC_OscConfig+0x8c>
 800187c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001880:	d1f5      	bne.n	800186e <HAL_RCC_OscConfig+0xd6>
 8001882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001886:	6023      	str	r3, [r4, #0]
 8001888:	e7c9      	b.n	800181e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800188a:	f7ff fc5b 	bl	8001144 <HAL_GetTick>
 800188e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001892:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001894:	2701      	movs	r7, #1
 8001896:	fa96 f3a6 	rbit	r3, r6
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	fa96 f3a6 	rbit	r3, r6
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	fa07 f303 	lsl.w	r3, r7, r3
 80018ac:	4213      	tst	r3, r2
 80018ae:	f43f af7e 	beq.w	80017ae <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff fc47 	bl	8001144 <HAL_GetTick>
 80018b6:	eba0 0008 	sub.w	r0, r0, r8
 80018ba:	2864      	cmp	r0, #100	; 0x64
 80018bc:	d9eb      	bls.n	8001896 <HAL_RCC_OscConfig+0xfe>
 80018be:	e7d2      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c0:	4c7e      	ldr	r4, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x324>)
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	f013 0f0c 	tst.w	r3, #12
 80018c8:	d007      	beq.n	80018da <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018ca:	6863      	ldr	r3, [r4, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d122      	bne.n	800191a <HAL_RCC_OscConfig+0x182>
 80018d4:	6863      	ldr	r3, [r4, #4]
 80018d6:	03de      	lsls	r6, r3, #15
 80018d8:	d41f      	bmi.n	800191a <HAL_RCC_OscConfig+0x182>
 80018da:	2302      	movs	r3, #2
 80018dc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	6821      	ldr	r1, [r4, #0]
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2201      	movs	r2, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	420b      	tst	r3, r1
 80018f6:	d003      	beq.n	8001900 <HAL_RCC_OscConfig+0x168>
 80018f8:	692b      	ldr	r3, [r5, #16]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f47f af50 	bne.w	80017a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	6821      	ldr	r1, [r4, #0]
 8001902:	23f8      	movs	r3, #248	; 0xf8
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	fab3 f283 	clz	r2, r3
 800190c:	696b      	ldr	r3, [r5, #20]
 800190e:	4093      	lsls	r3, r2
 8001910:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001914:	4313      	orrs	r3, r2
 8001916:	6023      	str	r3, [r4, #0]
 8001918:	e74d      	b.n	80017b6 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191a:	692a      	ldr	r2, [r5, #16]
 800191c:	2601      	movs	r6, #1
 800191e:	b30a      	cbz	r2, 8001964 <HAL_RCC_OscConfig+0x1cc>
 8001920:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800192c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	2702      	movs	r7, #2
 8001934:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001936:	f7ff fc05 	bl	8001144 <HAL_GetTick>
 800193a:	4680      	mov	r8, r0
 800193c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	fa97 f3a7 	rbit	r3, r7
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	fa06 f303 	lsl.w	r3, r6, r3
 8001952:	4213      	tst	r3, r2
 8001954:	d1d4      	bne.n	8001900 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fbf5 	bl	8001144 <HAL_GetTick>
 800195a:	eba0 0008 	sub.w	r0, r0, r8
 800195e:	2802      	cmp	r0, #2
 8001960:	d9ec      	bls.n	800193c <HAL_RCC_OscConfig+0x1a4>
 8001962:	e780      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
 8001964:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	2702      	movs	r7, #2
 8001978:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800197a:	f7ff fbe3 	bl	8001144 <HAL_GetTick>
 800197e:	4680      	mov	r8, r0
 8001980:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001984:	6822      	ldr	r2, [r4, #0]
 8001986:	fa97 f3a7 	rbit	r3, r7
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	fa06 f303 	lsl.w	r3, r6, r3
 8001996:	4213      	tst	r3, r2
 8001998:	f43f af0d 	beq.w	80017b6 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fbd2 	bl	8001144 <HAL_GetTick>
 80019a0:	eba0 0008 	sub.w	r0, r0, r8
 80019a4:	2802      	cmp	r0, #2
 80019a6:	d9eb      	bls.n	8001980 <HAL_RCC_OscConfig+0x1e8>
 80019a8:	e75d      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019aa:	69aa      	ldr	r2, [r5, #24]
 80019ac:	4e43      	ldr	r6, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0x324>)
 80019ae:	4944      	ldr	r1, [pc, #272]	; (8001ac0 <HAL_RCC_OscConfig+0x328>)
 80019b0:	2401      	movs	r4, #1
 80019b2:	b31a      	cbz	r2, 80019fc <HAL_RCC_OscConfig+0x264>
 80019b4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	440b      	add	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	2702      	movs	r7, #2
 80019c2:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbbe 	bl	8001144 <HAL_GetTick>
 80019c8:	4680      	mov	r8, r0
 80019ca:	fa97 f3a7 	rbit	r3, r7
 80019ce:	fa97 f3a7 	rbit	r3, r7
 80019d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80019d8:	fa97 f3a7 	rbit	r3, r7
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa04 f303 	lsl.w	r3, r4, r3
 80019e8:	4213      	tst	r3, r2
 80019ea:	f47f aee8 	bne.w	80017be <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff fba9 	bl	8001144 <HAL_GetTick>
 80019f2:	eba0 0008 	sub.w	r0, r0, r8
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9e7      	bls.n	80019ca <HAL_RCC_OscConfig+0x232>
 80019fa:	e734      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
 80019fc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	440b      	add	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	2702      	movs	r7, #2
 8001a0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fb9a 	bl	8001144 <HAL_GetTick>
 8001a10:	4680      	mov	r8, r0
 8001a12:	fa97 f3a7 	rbit	r3, r7
 8001a16:	fa97 f3a7 	rbit	r3, r7
 8001a1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001a20:	fa97 f3a7 	rbit	r3, r7
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	fa04 f303 	lsl.w	r3, r4, r3
 8001a30:	4213      	tst	r3, r2
 8001a32:	f43f aec4 	beq.w	80017be <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fb85 	bl	8001144 <HAL_GetTick>
 8001a3a:	eba0 0008 	sub.w	r0, r0, r8
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9e7      	bls.n	8001a12 <HAL_RCC_OscConfig+0x27a>
 8001a42:	e710      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a44:	4c1d      	ldr	r4, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x324>)
 8001a46:	69e3      	ldr	r3, [r4, #28]
 8001a48:	00d9      	lsls	r1, r3, #3
 8001a4a:	d434      	bmi.n	8001ab6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	69e3      	ldr	r3, [r4, #28]
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	61e3      	str	r3, [r4, #28]
 8001a54:	69e3      	ldr	r3, [r4, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a5e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4f18      	ldr	r7, [pc, #96]	; (8001ac4 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	05da      	lsls	r2, r3, #23
 8001a66:	d52f      	bpl.n	8001ac8 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	68eb      	ldr	r3, [r5, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d13d      	bne.n	8001aea <HAL_RCC_OscConfig+0x352>
 8001a6e:	6a23      	ldr	r3, [r4, #32]
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb65 	bl	8001144 <HAL_GetTick>
 8001a7a:	2702      	movs	r7, #2
 8001a7c:	4682      	mov	sl, r0
 8001a7e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	f04f 0801 	mov.w	r8, #1
 8001a84:	fa97 f3a7 	rbit	r3, r7
 8001a88:	fa97 f3a7 	rbit	r3, r7
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d06c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x3d2>
 8001a90:	6a22      	ldr	r2, [r4, #32]
 8001a92:	fa99 f3a9 	rbit	r3, r9
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	fa08 f303 	lsl.w	r3, r8, r3
 8001aa2:	4213      	tst	r3, r2
 8001aa4:	d058      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8001aa6:	2e00      	cmp	r6, #0
 8001aa8:	f43f ae8d 	beq.w	80017c6 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	69e3      	ldr	r3, [r4, #28]
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	61e3      	str	r3, [r4, #28]
 8001ab4:	e687      	b.n	80017c6 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2600      	movs	r6, #0
 8001ab8:	e7d2      	b.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	10908120 	.word	0x10908120
 8001ac4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb38 	bl	8001144 <HAL_GetTick>
 8001ad4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	d4c5      	bmi.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001adc:	f7ff fb32 	bl	8001144 <HAL_GetTick>
 8001ae0:	eba0 0008 	sub.w	r0, r0, r8
 8001ae4:	2864      	cmp	r0, #100	; 0x64
 8001ae6:	d9f6      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
 8001ae8:	e6bd      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	bb3b      	cbnz	r3, 8001b3c <HAL_RCC_OscConfig+0x3a4>
 8001aec:	6a23      	ldr	r3, [r4, #32]
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6223      	str	r3, [r4, #32]
 8001af4:	6a23      	ldr	r3, [r4, #32]
 8001af6:	f023 0304 	bic.w	r3, r3, #4
 8001afa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001afc:	f7ff fb22 	bl	8001144 <HAL_GetTick>
 8001b00:	2702      	movs	r7, #2
 8001b02:	4682      	mov	sl, r0
 8001b04:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	f04f 0801 	mov.w	r8, #1
 8001b0a:	fa97 f3a7 	rbit	r3, r7
 8001b0e:	fa97 f3a7 	rbit	r3, r7
 8001b12:	b373      	cbz	r3, 8001b72 <HAL_RCC_OscConfig+0x3da>
 8001b14:	6a22      	ldr	r2, [r4, #32]
 8001b16:	fa99 f3a9 	rbit	r3, r9
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	fa08 f303 	lsl.w	r3, r8, r3
 8001b26:	4213      	tst	r3, r2
 8001b28:	d0bd      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fb0b 	bl	8001144 <HAL_GetTick>
 8001b2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b32:	eba0 000a 	sub.w	r0, r0, sl
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d9e7      	bls.n	8001b0a <HAL_RCC_OscConfig+0x372>
 8001b3a:	e694      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	6a23      	ldr	r3, [r4, #32]
 8001b40:	d103      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3b2>
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6223      	str	r3, [r4, #32]
 8001b48:	e791      	b.n	8001a6e <HAL_RCC_OscConfig+0x2d6>
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6223      	str	r3, [r4, #32]
 8001b50:	6a23      	ldr	r3, [r4, #32]
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	e78d      	b.n	8001a74 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff faf4 	bl	8001144 <HAL_GetTick>
 8001b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b60:	eba0 000a 	sub.w	r0, r0, sl
 8001b64:	4298      	cmp	r0, r3
 8001b66:	d98d      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2ec>
 8001b68:	e67d      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
 8001b6a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b70:	e78f      	b.n	8001a92 <HAL_RCC_OscConfig+0x2fa>
 8001b72:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b78:	e7cd      	b.n	8001b16 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4c41      	ldr	r4, [pc, #260]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	f43f ae0c 	beq.w	80017a0 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b88:	2a02      	cmp	r2, #2
 8001b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b8e:	d152      	bne.n	8001c36 <HAL_RCC_OscConfig+0x49e>
 8001b90:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ba6:	f7ff facd 	bl	8001144 <HAL_GetTick>
 8001baa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001bae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	2601      	movs	r6, #1
 8001bb2:	fa97 f3a7 	rbit	r3, r7
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	fa97 f3a7 	rbit	r3, r7
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa06 f303 	lsl.w	r3, r6, r3
 8001bc8:	4213      	tst	r3, r2
 8001bca:	d12d      	bne.n	8001c28 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	6862      	ldr	r2, [r4, #4]
 8001bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001bd0:	6a29      	ldr	r1, [r5, #32]
 8001bd2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	6063      	str	r3, [r4, #4]
 8001bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001bf6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf8:	f7ff faa4 	bl	8001144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001bfe:	4607      	mov	r7, r0
 8001c00:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	fa95 f3a5 	rbit	r3, r5
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa06 f303 	lsl.w	r3, r6, r3
 8001c16:	4213      	tst	r3, r2
 8001c18:	f47f add9 	bne.w	80017ce <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fa92 	bl	8001144 <HAL_GetTick>
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9ec      	bls.n	8001c00 <HAL_RCC_OscConfig+0x468>
 8001c26:	e61e      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fa8c 	bl	8001144 <HAL_GetTick>
 8001c2c:	eba0 0008 	sub.w	r0, r0, r8
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9be      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x41a>
 8001c34:	e617      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
 8001c36:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fa7a 	bl	8001144 <HAL_GetTick>
 8001c50:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001c54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	2601      	movs	r6, #1
 8001c58:	fa95 f3a5 	rbit	r3, r5
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	fa95 f3a5 	rbit	r3, r5
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa06 f303 	lsl.w	r3, r6, r3
 8001c6e:	4213      	tst	r3, r2
 8001c70:	f43f adad 	beq.w	80017ce <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fa66 	bl	8001144 <HAL_GetTick>
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	d9ec      	bls.n	8001c58 <HAL_RCC_OscConfig+0x4c0>
 8001c7e:	e5f2      	b.n	8001866 <HAL_RCC_OscConfig+0xce>
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001c86:	4c13      	ldr	r4, [pc, #76]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c88:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8a:	f001 030c 	and.w	r3, r1, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11e      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x4c>
 8001c92:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001c96:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c9a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ca8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	40d3      	lsrs	r3, r2
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x58>)
 8001cbe:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cc0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001cc2:	bf4a      	itet	mi
 8001cc4:	4b06      	ldrmi	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001cc6:	4b07      	ldrpl	r3, [pc, #28]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001cc8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001ccc:	4358      	muls	r0, r3
 8001cce:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	0800270c 	.word	0x0800270c
 8001cdc:	0800271c 	.word	0x0800271c
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <HAL_RCC_ClockConfig>:
{
 8001ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cee:	4604      	mov	r4, r0
 8001cf0:	b910      	cbnz	r0, 8001cf8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_RCC_ClockConfig+0x144>)
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d32e      	bcc.n	8001d62 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	0791      	lsls	r1, r2, #30
 8001d08:	d436      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	07d2      	lsls	r2, r2, #31
 8001d0c:	d43c      	bmi.n	8001d88 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0e:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x144>)
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	429d      	cmp	r5, r3
 8001d18:	d375      	bcc.n	8001e06 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	4d44      	ldr	r5, [pc, #272]	; (8001e30 <HAL_RCC_ClockConfig+0x148>)
 8001d1e:	f012 0f04 	tst.w	r2, #4
 8001d22:	d17c      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	0713      	lsls	r3, r2, #28
 8001d26:	d506      	bpl.n	8001d36 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d28:	686b      	ldr	r3, [r5, #4]
 8001d2a:	6922      	ldr	r2, [r4, #16]
 8001d2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d34:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d36:	f7ff ffa5 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001d3a:	686b      	ldr	r3, [r5, #4]
 8001d3c:	22f0      	movs	r2, #240	; 0xf0
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d4a:	40d3      	lsrs	r3, r2
 8001d4c:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_RCC_ClockConfig+0x14c>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	40d8      	lsrs	r0, r3
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_ClockConfig+0x150>)
 8001d54:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff f9b2 	bl	80010c0 <HAL_InitTick>
  return HAL_OK;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	4299      	cmp	r1, r3
 8001d74:	d1bd      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xa>
 8001d76:	e7c5      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	492d      	ldr	r1, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x148>)
 8001d7a:	68a0      	ldr	r0, [r4, #8]
 8001d7c:	684b      	ldr	r3, [r1, #4]
 8001d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d82:	4303      	orrs	r3, r0
 8001d84:	604b      	str	r3, [r1, #4]
 8001d86:	e7c0      	b.n	8001d0a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d88:	6862      	ldr	r2, [r4, #4]
 8001d8a:	4e29      	ldr	r6, [pc, #164]	; (8001e30 <HAL_RCC_ClockConfig+0x148>)
 8001d8c:	2a01      	cmp	r2, #1
 8001d8e:	d127      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	6831      	ldr	r1, [r6, #0]
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	d0a1      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	6873      	ldr	r3, [r6, #4]
 8001db0:	f023 0303 	bic.w	r3, r3, #3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001db8:	f7ff f9c4 	bl	8001144 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001dc0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	6873      	ldr	r3, [r6, #4]
 8001dc4:	6862      	ldr	r2, [r4, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dce:	d09e      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff f9b8 	bl	8001144 <HAL_GetTick>
 8001dd4:	1bc0      	subs	r0, r0, r7
 8001dd6:	4540      	cmp	r0, r8
 8001dd8:	d9f3      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001dda:	2003      	movs	r0, #3
}
 8001ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de0:	2a02      	cmp	r2, #2
 8001de2:	bf0c      	ite	eq
 8001de4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001de8:	2302      	movne	r3, #2
 8001dea:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	6830      	ldr	r0, [r6, #0]
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	4203      	tst	r3, r0
 8001e04:	e7d2      	b.n	8001dac <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	f023 0307 	bic.w	r3, r3, #7
 8001e0c:	432b      	orrs	r3, r5
 8001e0e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e10:	6813      	ldr	r3, [r2, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	429d      	cmp	r5, r3
 8001e18:	f47f af6b 	bne.w	8001cf2 <HAL_RCC_ClockConfig+0xa>
 8001e1c:	e77d      	b.n	8001d1a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1e:	686b      	ldr	r3, [r5, #4]
 8001e20:	68e1      	ldr	r1, [r4, #12]
 8001e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e26:	430b      	orrs	r3, r1
 8001e28:	606b      	str	r3, [r5, #4]
 8001e2a:	e77b      	b.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08002730 	.word	0x08002730
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e58:	6810      	ldr	r0, [r2, #0]
}    
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08002740 	.word	0x08002740
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e80:	40d3      	lsrs	r3, r2
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001e88:	6810      	ldr	r0, [r2, #0]
} 
 8001e8a:	40d8      	lsrs	r0, r3
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08002740 	.word	0x08002740
 8001e98:	20000008 	.word	0x20000008

08001e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ea0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ea2:	6921      	ldr	r1, [r4, #16]
 8001ea4:	68a3      	ldr	r3, [r4, #8]
 8001ea6:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ea8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	6961      	ldr	r1, [r4, #20]
 8001eae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001eb0:	4949      	ldr	r1, [pc, #292]	; (8001fd8 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eb2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001eb4:	4001      	ands	r1, r0
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eba:	686b      	ldr	r3, [r5, #4]
 8001ebc:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ebe:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ec8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001eca:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ecc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ed0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <UART_SetConfig+0x140>)
 8001ed8:	429d      	cmp	r5, r3
 8001eda:	d112      	bne.n	8001f02 <UART_SetConfig+0x66>
 8001edc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ee0:	493f      	ldr	r1, [pc, #252]	; (8001fe0 <UART_SetConfig+0x144>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	d13b      	bne.n	8001f68 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d836      	bhi.n	8001f62 <UART_SetConfig+0xc6>
 8001ef4:	e8df f003 	tbb	[pc, r3]
 8001ef8:	3524210f 	.word	0x3524210f
 8001efc:	3535352d 	.word	0x3535352d
 8001f00:	30          	.byte	0x30
 8001f01:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <UART_SetConfig+0x148>)
 8001f04:	429d      	cmp	r5, r3
 8001f06:	d003      	beq.n	8001f10 <UART_SetConfig+0x74>
 8001f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0c:	429d      	cmp	r5, r3
 8001f0e:	d15e      	bne.n	8001fce <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f14:	d131      	bne.n	8001f7a <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f16:	f7ff ff91 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f1a:	6861      	ldr	r1, [r4, #4]
 8001f1c:	084a      	lsrs	r2, r1, #1
 8001f1e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f26:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f28:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001f2e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f30:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f3a:	f7ff ff97 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8001f3e:	e7ec      	b.n	8001f1a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f40:	6860      	ldr	r0, [r4, #4]
 8001f42:	0843      	lsrs	r3, r0, #1
 8001f44:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f48:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f4c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f50:	e7e9      	b.n	8001f26 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f52:	f7ff fe97 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001f56:	e7e0      	b.n	8001f1a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f58:	6860      	ldr	r0, [r4, #4]
 8001f5a:	0843      	lsrs	r3, r0, #1
 8001f5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f60:	e7f4      	b.n	8001f4c <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e7e0      	b.n	8001f2a <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d833      	bhi.n	8001fd4 <UART_SetConfig+0x138>
 8001f6c:	e8df f003 	tbb	[pc, r3]
 8001f70:	321b1005 	.word	0x321b1005
 8001f74:	32323227 	.word	0x32323227
 8001f78:	2a          	.byte	0x2a
 8001f79:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f7a:	f7ff ff5f 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8001f7e:	6863      	ldr	r3, [r4, #4]
 8001f80:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f84:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f88:	b280      	uxth	r0, r0
 8001f8a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f8c:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f90:	f7ff ff6c 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <UART_SetConfig+0x140>)
 8001fa0:	b280      	uxth	r0, r0
 8001fa2:	60d8      	str	r0, [r3, #12]
 8001fa4:	e7f2      	b.n	8001f8c <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fa6:	6862      	ldr	r2, [r4, #4]
 8001fa8:	0853      	lsrs	r3, r2, #1
 8001faa:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001fae:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <UART_SetConfig+0x140>)
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	60d3      	str	r3, [r2, #12]
 8001fbc:	e7e6      	b.n	8001f8c <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fbe:	f7ff fe61 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001fc2:	e7e7      	b.n	8001f94 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	0853      	lsrs	r3, r2, #1
 8001fc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fcc:	e7f1      	b.n	8001fb2 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fd2:	d0c6      	beq.n	8001f62 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}
 8001fd8:	efff69f3 	.word	0xefff69f3
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	0800272c 	.word	0x0800272c
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fea:	07da      	lsls	r2, r3, #31
{
 8001fec:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fee:	d506      	bpl.n	8001ffe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ff0:	6801      	ldr	r1, [r0, #0]
 8001ff2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ff4:	684a      	ldr	r2, [r1, #4]
 8001ff6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ffa:	4322      	orrs	r2, r4
 8001ffc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ffe:	079c      	lsls	r4, r3, #30
 8002000:	d506      	bpl.n	8002010 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002002:	6801      	ldr	r1, [r0, #0]
 8002004:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002006:	684a      	ldr	r2, [r1, #4]
 8002008:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800200c:	4322      	orrs	r2, r4
 800200e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002010:	0759      	lsls	r1, r3, #29
 8002012:	d506      	bpl.n	8002022 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002014:	6801      	ldr	r1, [r0, #0]
 8002016:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002018:	684a      	ldr	r2, [r1, #4]
 800201a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800201e:	4322      	orrs	r2, r4
 8002020:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002022:	071a      	lsls	r2, r3, #28
 8002024:	d506      	bpl.n	8002034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002026:	6801      	ldr	r1, [r0, #0]
 8002028:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800202a:	684a      	ldr	r2, [r1, #4]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002030:	4322      	orrs	r2, r4
 8002032:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002034:	06dc      	lsls	r4, r3, #27
 8002036:	d506      	bpl.n	8002046 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002038:	6801      	ldr	r1, [r0, #0]
 800203a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800203c:	688a      	ldr	r2, [r1, #8]
 800203e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002042:	4322      	orrs	r2, r4
 8002044:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002046:	0699      	lsls	r1, r3, #26
 8002048:	d506      	bpl.n	8002058 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800204a:	6801      	ldr	r1, [r0, #0]
 800204c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800204e:	688a      	ldr	r2, [r1, #8]
 8002050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002054:	4322      	orrs	r2, r4
 8002056:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002058:	065a      	lsls	r2, r3, #25
 800205a:	d50f      	bpl.n	800207c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800205c:	6801      	ldr	r1, [r0, #0]
 800205e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002060:	684a      	ldr	r2, [r1, #4]
 8002062:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002066:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002068:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800206c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800206e:	d105      	bne.n	800207c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002070:	684a      	ldr	r2, [r1, #4]
 8002072:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002074:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002078:	4322      	orrs	r2, r4
 800207a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	d506      	bpl.n	800208e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002080:	6802      	ldr	r2, [r0, #0]
 8002082:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002084:	6853      	ldr	r3, [r2, #4]
 8002086:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800208a:	430b      	orrs	r3, r1
 800208c:	6053      	str	r3, [r2, #4]
 800208e:	bd10      	pop	{r4, pc}

08002090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002094:	9d06      	ldr	r5, [sp, #24]
 8002096:	4604      	mov	r4, r0
 8002098:	460f      	mov	r7, r1
 800209a:	4616      	mov	r6, r2
 800209c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209e:	6821      	ldr	r1, [r4, #0]
 80020a0:	69ca      	ldr	r2, [r1, #28]
 80020a2:	ea37 0302 	bics.w	r3, r7, r2
 80020a6:	bf0c      	ite	eq
 80020a8:	2201      	moveq	r2, #1
 80020aa:	2200      	movne	r2, #0
 80020ac:	42b2      	cmp	r2, r6
 80020ae:	d002      	beq.n	80020b6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020b0:	2000      	movs	r0, #0
}
 80020b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80020b6:	1c6b      	adds	r3, r5, #1
 80020b8:	d0f2      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020ba:	b99d      	cbnz	r5, 80020e4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80020ce:	2320      	movs	r3, #32
 80020d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80020d4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80020d8:	2300      	movs	r3, #0
 80020da:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80020de:	2003      	movs	r0, #3
 80020e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020e4:	f7ff f82e 	bl	8001144 <HAL_GetTick>
 80020e8:	eba0 0008 	sub.w	r0, r0, r8
 80020ec:	4285      	cmp	r5, r0
 80020ee:	d2d6      	bcs.n	800209e <UART_WaitOnFlagUntilTimeout+0xe>
 80020f0:	e7e4      	b.n	80020bc <UART_WaitOnFlagUntilTimeout+0x2c>

080020f2 <UART_CheckIdleState>:
{
 80020f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f6:	2600      	movs	r6, #0
 80020f8:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80020fa:	f7ff f823 	bl	8001144 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002104:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002106:	d417      	bmi.n	8002138 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	075b      	lsls	r3, r3, #29
 800210e:	d50a      	bpl.n	8002126 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	462b      	mov	r3, r5
 800211a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ffb6 	bl	8002090 <UART_WaitOnFlagUntilTimeout>
 8002124:	b9a0      	cbnz	r0, 8002150 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002126:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002128:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800212a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800212e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002132:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002136:	e00c      	b.n	8002152 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4632      	mov	r2, r6
 8002140:	4603      	mov	r3, r0
 8002142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff ffa2 	bl	8002090 <UART_WaitOnFlagUntilTimeout>
 800214c:	2800      	cmp	r0, #0
 800214e:	d0db      	beq.n	8002108 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002150:	2003      	movs	r0, #3
}
 8002152:	b002      	add	sp, #8
 8002154:	bd70      	pop	{r4, r5, r6, pc}

08002156 <HAL_UART_Init>:
{
 8002156:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002158:	4604      	mov	r4, r0
 800215a:	b360      	cbz	r0, 80021b6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800215c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002160:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002164:	b91b      	cbnz	r3, 800216e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002166:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800216a:	f000 f9df 	bl	800252c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800216e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002170:	2324      	movs	r3, #36	; 0x24
 8002172:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff fe8c 	bl	8001e9c <UART_SetConfig>
 8002184:	2801      	cmp	r0, #1
 8002186:	d016      	beq.n	80021b6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800218a:	b113      	cbz	r3, 8002192 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff2b 	bl	8001fe8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800219a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80021aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80021b2:	f7ff bf9e 	b.w	80020f2 <UART_CheckIdleState>
}
 80021b6:	2001      	movs	r0, #1
 80021b8:	bd10      	pop	{r4, pc}
	...

080021bc <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_Start(&hcan);
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80021c8:	2100      	movs	r1, #0
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff f83b 	bl	8001246 <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
 }
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000008c 	.word	0x2000008c
 80021e4:	20000094 	.word	0x20000094
 80021e8:	200000b0 	.word	0x200000b0

080021ec <MX_CAN_Init>:

/* CAN init function */
void MX_CAN_Init(void)
{

  hcan.Instance = CAN;
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 80021ee:	490f      	ldr	r1, [pc, #60]	; (800222c <MX_CAN_Init+0x40>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80021f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
{
 80021f4:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 4;
 80021f6:	2304      	movs	r3, #4
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80021f8:	60c2      	str	r2, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80021fa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
  hcan.Init.Prescaler = 4;
 80021fe:	e880 000a 	stmia.w	r0, {r1, r3}
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8002202:	6102      	str	r2, [r0, #16]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002204:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = ENABLE;
 8002206:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002208:	6083      	str	r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800220a:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800220c:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800220e:	7642      	strb	r2, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002210:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002212:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002214:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002216:	7742      	strb	r2, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002218:	f7fe ff9a 	bl	8001150 <HAL_CAN_Init>
 800221c:	b118      	cbz	r0, 8002226 <MX_CAN_Init+0x3a>
  {
    Error_Handler();
  }

}
 800221e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002222:	f000 b8ef 	b.w	8002404 <Error_Handler>
 8002226:	bd08      	pop	{r3, pc}
 8002228:	200000b8 	.word	0x200000b8
 800222c:	40006400 	.word	0x40006400

08002230 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002230:	b510      	push	{r4, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	2214      	movs	r2, #20
 8002238:	2100      	movs	r1, #0
 800223a:	a803      	add	r0, sp, #12
 800223c:	f000 f9fc 	bl	8002638 <memset>
  if(canHandle->Instance==CAN)
 8002240:	6822      	ldr	r2, [r4, #0]
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_CAN_MspInit+0x80>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d131      	bne.n	80022ac <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002248:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002254:	61da      	str	r2, [r3, #28]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800225c:	9201      	str	r2, [sp, #4]
 800225e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002266:	615a      	str	r2, [r3, #20]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002272:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002276:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002284:	2309      	movs	r3, #9
 8002286:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f7ff f9c6 	bl	8001618 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	4611      	mov	r1, r2
 8002290:	2014      	movs	r0, #20
 8002292:	f7ff f96b 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8002296:	2014      	movs	r0, #20
 8002298:	f7ff f99c 	bl	80015d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2015      	movs	r0, #21
 80022a0:	4611      	mov	r1, r2
 80022a2:	f7ff f963 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80022a6:	2015      	movs	r0, #21
 80022a8:	f7ff f994 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80022ac:	b008      	add	sp, #32
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	40006400 	.word	0x40006400

080022b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	2214      	movs	r2, #20
 80022ba:	2100      	movs	r1, #0
 80022bc:	a803      	add	r0, sp, #12
 80022be:	f000 f9bb 	bl	8002638 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80022c4:	4e20      	ldr	r6, [pc, #128]	; (8002348 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80022d4:	9200      	str	r2, [sp, #0]
 80022d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80022fa:	4630      	mov	r0, r6
 80022fc:	2200      	movs	r2, #0
 80022fe:	21fb      	movs	r1, #251	; 0xfb
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8002302:	f7ff fa43 	bl	800178c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f7ff fa3c 	bl	800178c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8002316:	23fb      	movs	r3, #251	; 0xfb
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	a903      	add	r1, sp, #12
 800231c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 800231e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f7ff f977 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800232a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	a903      	add	r1, sp, #12
 8002330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002334:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f7ff f96c 	bl	8001618 <HAL_GPIO_Init>

}
 8002340:	b008      	add	sp, #32
 8002342:	bd70      	pop	{r4, r5, r6, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	48000400 	.word	0x48000400

0800234c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002350:	f7fe feda 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002354:	f000 f807 	bl	8002366 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002358:	f7ff ffac 	bl	80022b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800235c:	f7ff ff46 	bl	80021ec <MX_CAN_Init>
  MX_USART2_UART_Init();
 8002360:	f000 f8c6 	bl	80024f0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002364:	e7fe      	b.n	8002364 <main+0x18>

08002366 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b090      	sub	sp, #64	; 0x40
 800236a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	2228      	movs	r2, #40	; 0x28
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f95f 	bl	8002638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002388:	2301      	movs	r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002396:	2301      	movs	r3, #1
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023aa:	f107 0318 	add.w	r3, r7, #24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f9f2 	bl	8001798 <HAL_RCC_OscConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80023c4:	f000 f81e 	bl	8002404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c8:	230f      	movs	r3, #15
 80023ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023cc:	2302      	movs	r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fc80 	bl	8001ce8 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80023f8:	f000 f804 	bl	8002404 <Error_Handler>
  }
}
 80023fc:	bf00      	nop
 80023fe:	3740      	adds	r7, #64	; 0x40
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_MspInit+0x2c>)
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	699a      	ldr	r2, [r3, #24]
{
 8002420:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	f002 0201 	and.w	r2, r2, #1
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002430:	61da      	str	r2, [r3, #28]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243c:	b002      	add	sp, #8
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000

08002444 <NMI_Handler>:
 8002444:	4770      	bx	lr

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	e7fe      	b.n	800244a <BusFault_Handler>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	e7fe      	b.n	800244c <UsageFault_Handler>

0800244e <SVC_Handler>:
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f7fe be6a 	b.w	800112c <HAL_IncTick>

08002458 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <CAN_RX1_IRQHandler+0x8>)
 800245a:	f7fe bf76 	b.w	800134a <HAL_CAN_IRQHandler>
 800245e:	bf00      	nop
 8002460:	200000b8 	.word	0x200000b8

08002464 <CAN_RX0_IRQHandler>:
 8002464:	f7ff bff8 	b.w	8002458 <CAN_RX1_IRQHandler>

08002468 <_getpid>:
 8002468:	2001      	movs	r0, #1
 800246a:	4770      	bx	lr

0800246c <_kill>:
 800246c:	b508      	push	{r3, lr}
 800246e:	f000 f8b9 	bl	80025e4 <__errno>
 8002472:	2316      	movs	r3, #22
 8002474:	6003      	str	r3, [r0, #0]
 8002476:	f04f 30ff 	mov.w	r0, #4294967295
 800247a:	bd08      	pop	{r3, pc}

0800247c <_exit>:
 800247c:	b508      	push	{r3, lr}
 800247e:	f000 f8b1 	bl	80025e4 <__errno>
 8002482:	2316      	movs	r3, #22
 8002484:	6003      	str	r3, [r0, #0]
 8002486:	e7fe      	b.n	8002486 <_exit+0xa>

08002488 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4915      	ldr	r1, [pc, #84]	; (80024e0 <SystemInit+0x58>)
 800248a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800248e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <SystemInit+0x5c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80024a0:	6858      	ldr	r0, [r3, #4]
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <SystemInit+0x60>)
 80024a4:	4002      	ands	r2, r0
 80024a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024b2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80024c2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	f022 020f 	bic.w	r2, r2, #15
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80024cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <SystemInit+0x64>)
 80024d0:	4002      	ands	r2, r0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024dc:	608b      	str	r3, [r1, #8]
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	f87fc00c 	.word	0xf87fc00c
 80024ec:	ff00fccc 	.word	0xff00fccc

080024f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024f0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80024f2:	480c      	ldr	r0, [pc, #48]	; (8002524 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <MX_USART2_UART_Init+0x38>)
 80024f6:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 80024fa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024fe:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002500:	2300      	movs	r3, #0
 8002502:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002504:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002506:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002508:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800250c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002510:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002512:	f7ff fe20 	bl	8002156 <HAL_UART_Init>
 8002516:	b118      	cbz	r0, 8002520 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800251c:	f7ff bf72 	b.w	8002404 <Error_Handler>
 8002520:	bd08      	pop	{r3, pc}
 8002522:	bf00      	nop
 8002524:	200000e0 	.word	0x200000e0
 8002528:	40004400 	.word	0x40004400

0800252c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800252c:	b510      	push	{r4, lr}
 800252e:	4604      	mov	r4, r0
 8002530:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	2214      	movs	r2, #20
 8002534:	2100      	movs	r1, #0
 8002536:	a803      	add	r0, sp, #12
 8002538:	f000 f87e 	bl	8002638 <memset>
  if(uartHandle->Instance==USART2)
 800253c:	6822      	ldr	r2, [r4, #0]
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_UART_MspInit+0x60>)
 8002540:	429a      	cmp	r2, r3
 8002542:	d121      	bne.n	8002588 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002544:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002558:	9201      	str	r2, [sp, #4]
 800255a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800256e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002572:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002580:	2307      	movs	r3, #7
 8002582:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f7ff f848 	bl	8001618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002588:	b008      	add	sp, #32
 800258a:	bd10      	pop	{r4, pc}
 800258c:	40004400 	.word	0x40004400

08002590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002594:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002596:	e003      	b.n	80025a0 <LoopCopyDataInit>

08002598 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800259a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800259c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800259e:	3104      	adds	r1, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025a8:	d3f6      	bcc.n	8002598 <CopyDataInit>
	ldr	r2, =_sbss
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025ac:	e002      	b.n	80025b4 <LoopFillZerobss>

080025ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025b0:	f842 3b04 	str.w	r3, [r2], #4

080025b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <LoopForever+0x16>)
	cmp	r2, r3
 80025b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025b8:	d3f9      	bcc.n	80025ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ba:	f7ff ff65 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f000 f817 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025c2:	f7ff fec3 	bl	800234c <main>

080025c6 <LoopForever>:

LoopForever:
    b LoopForever
 80025c6:	e7fe      	b.n	80025c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025c8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80025cc:	080028c0 	.word	0x080028c0
	ldr	r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025d4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80025d8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80025dc:	20000154 	.word	0x20000154

080025e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC1_2_IRQHandler>
	...

080025e4 <__errno>:
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <__errno+0x8>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4e0d      	ldr	r6, [pc, #52]	; (8002628 <__libc_init_array+0x38>)
 80025f4:	4c0d      	ldr	r4, [pc, #52]	; (800262c <__libc_init_array+0x3c>)
 80025f6:	1ba4      	subs	r4, r4, r6
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	2500      	movs	r5, #0
 80025fc:	42a5      	cmp	r5, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	4e0b      	ldr	r6, [pc, #44]	; (8002630 <__libc_init_array+0x40>)
 8002602:	4c0c      	ldr	r4, [pc, #48]	; (8002634 <__libc_init_array+0x44>)
 8002604:	f000 f876 	bl	80026f4 <_init>
 8002608:	1ba4      	subs	r4, r4, r6
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	2500      	movs	r5, #0
 800260e:	42a5      	cmp	r5, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002618:	4798      	blx	r3
 800261a:	3501      	adds	r5, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002622:	4798      	blx	r3
 8002624:	3501      	adds	r5, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	080028b8 	.word	0x080028b8
 800262c:	080028b8 	.word	0x080028b8
 8002630:	080028b8 	.word	0x080028b8
 8002634:	080028bc 	.word	0x080028bc

08002638 <memset>:
 8002638:	4402      	add	r2, r0
 800263a:	4603      	mov	r3, r0
 800263c:	4293      	cmp	r3, r2
 800263e:	d100      	bne.n	8002642 <memset+0xa>
 8002640:	4770      	bx	lr
 8002642:	f803 1b01 	strb.w	r1, [r3], #1
 8002646:	e7f9      	b.n	800263c <memset+0x4>

08002648 <memcpy>:
 8002648:	b510      	push	{r4, lr}
 800264a:	1e43      	subs	r3, r0, #1
 800264c:	440a      	add	r2, r1
 800264e:	4291      	cmp	r1, r2
 8002650:	d100      	bne.n	8002654 <memcpy+0xc>
 8002652:	bd10      	pop	{r4, pc}
 8002654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800265c:	e7f7      	b.n	800264e <memcpy+0x6>

0800265e <abort>:
 800265e:	b508      	push	{r3, lr}
 8002660:	2006      	movs	r0, #6
 8002662:	f000 f82b 	bl	80026bc <raise>
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff ff08 	bl	800247c <_exit>

0800266c <_raise_r>:
 800266c:	291f      	cmp	r1, #31
 800266e:	b538      	push	{r3, r4, r5, lr}
 8002670:	4604      	mov	r4, r0
 8002672:	460d      	mov	r5, r1
 8002674:	d904      	bls.n	8002680 <_raise_r+0x14>
 8002676:	2316      	movs	r3, #22
 8002678:	6003      	str	r3, [r0, #0]
 800267a:	f04f 30ff 	mov.w	r0, #4294967295
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002682:	b112      	cbz	r2, 800268a <_raise_r+0x1e>
 8002684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002688:	b94b      	cbnz	r3, 800269e <_raise_r+0x32>
 800268a:	4620      	mov	r0, r4
 800268c:	f000 f830 	bl	80026f0 <_getpid_r>
 8002690:	462a      	mov	r2, r5
 8002692:	4601      	mov	r1, r0
 8002694:	4620      	mov	r0, r4
 8002696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800269a:	f000 b817 	b.w	80026cc <_kill_r>
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d00a      	beq.n	80026b8 <_raise_r+0x4c>
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	d103      	bne.n	80026ae <_raise_r+0x42>
 80026a6:	2316      	movs	r3, #22
 80026a8:	6003      	str	r3, [r0, #0]
 80026aa:	2001      	movs	r0, #1
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
 80026ae:	2400      	movs	r4, #0
 80026b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80026b4:	4628      	mov	r0, r5
 80026b6:	4798      	blx	r3
 80026b8:	2000      	movs	r0, #0
 80026ba:	bd38      	pop	{r3, r4, r5, pc}

080026bc <raise>:
 80026bc:	4b02      	ldr	r3, [pc, #8]	; (80026c8 <raise+0xc>)
 80026be:	4601      	mov	r1, r0
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	f7ff bfd3 	b.w	800266c <_raise_r>
 80026c6:	bf00      	nop
 80026c8:	2000000c 	.word	0x2000000c

080026cc <_kill_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4c07      	ldr	r4, [pc, #28]	; (80026ec <_kill_r+0x20>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	4605      	mov	r5, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	f7ff fec7 	bl	800246c <_kill>
 80026de:	1c43      	adds	r3, r0, #1
 80026e0:	d102      	bne.n	80026e8 <_kill_r+0x1c>
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	b103      	cbz	r3, 80026e8 <_kill_r+0x1c>
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	bd38      	pop	{r3, r4, r5, pc}
 80026ea:	bf00      	nop
 80026ec:	20000150 	.word	0x20000150

080026f0 <_getpid_r>:
 80026f0:	f7ff beba 	b.w	8002468 <_getpid>

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
